<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>椰子小姐的笔记本</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://misscoconut.github.io/"/>
  <updated>2021-02-16T12:40:17.549Z</updated>
  <id>https://misscoconut.github.io/</id>
  
  <author>
    <name>MissCoconut</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>期权学习笔记</title>
    <link href="https://misscoconut.github.io/2021/02/13/%E6%9C%9F%E6%9D%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://misscoconut.github.io/2021/02/13/%E6%9C%9F%E6%9D%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-13T14:42:54.000Z</published>
    <updated>2021-02-16T12:40:17.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、期权概念与基础知识"><a href="#一、期权概念与基础知识" class="headerlink" title="一、期权概念与基础知识"></a>一、期权概念与基础知识</h1><h2 id="1、期权的定义与特点"><a href="#1、期权的定义与特点" class="headerlink" title="1、期权的定义与特点"></a>1、期权的定义与特点</h2><h3 id="1-1-期权的定义"><a href="#1-1-期权的定义" class="headerlink" title="1.1 期权的定义"></a>1.1 期权的定义</h3><p>期权合约是赋予持有者拥有在<strong>将来某一时间</strong>，以某一<strong>确定的价格</strong>购买/出售标的资产的权利。</p><p>对于期权合约的买方来说，他有相应的<strong>权利</strong>，而没有<strong>义务</strong>；</p><p>对于期权合约的卖方来说，他有相应的<strong>义务</strong>，而没有<strong>权利</strong>。</p><p>期权买卖的双方权利与义务并不对等，在合约到期时，买方拥有行权或放弃行权的权利；而卖方有义务去满足买方行权的需求，却没有权利要求买方行权或放弃。</p><a id="more"></a><p>可以将期权理解成保险合同，买方是投保人，卖方是保险公司，买方向卖方支付一笔保费（权利金），有权利要求卖方进行一定的赔偿，而卖方有义务去满足买方的赔偿需求。</p><h3 id="1-2-主要特点"><a href="#1-2-主要特点" class="headerlink" title="1.2 主要特点"></a>1.2 主要特点</h3><ul><li><p>保留有利的价格变动，去掉不利的风险；</p></li><li><p>理论上收益可以无上限，损失可控；</p><p>以买入 CALL 为例，标的资产价格 &gt; 行权价时，收益无上限；标的资产价格 &lt; 行权价时，不行权，损失权利金。</p></li></ul><h3 id="1-3-期权要素"><a href="#1-3-期权要素" class="headerlink" title="1.3 期权要素"></a>1.3 期权要素</h3><p>一份期权合约通常有以下几个要素构成：</p><ul><li>标的资产 Underlying asset : 这份期权合约交易的是啥，股票还是基金，期货还是现货…；</li><li>头寸：合约的买方 - 多头 long position；合约的卖方 - 空头 short position；</li><li>方向：看涨期权 CALL ；看跌期权 PUT；</li><li>合约期限 maturity：期权合约啥时候到期；</li><li>行权价 strike price ：买卖双方约定好的标的资产交易价格；</li><li>权利金 premium：买方支付给卖方购买合约的费用；</li><li>合约规模 size：交易的标的资产有多少，100 股 / 1 吨白糖 / … 。</li></ul><p><strong>划重点</strong>：</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnman7sv4pj30ss05kab0.jpg" alt="image-20210213225058541" style="zoom:67%;" /><h2 id="2、期权的分类"><a href="#2、期权的分类" class="headerlink" title="2、期权的分类"></a>2、期权的分类</h2><p>常见的期权分类：</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnmaqgucrwj30mw06i3zf.jpg" alt="image-20210213225407872" style="zoom:67%;" /><p>交易者权利两种期权比较好理解；</p><p>交割时限行中，欧式期权规定只有在到期时才能进行交割，而美式期权允许在到期日前任意时间点进行交割，百慕大期权的交割时限为约定好的一系列时间段；</p><p>执行价格主要与期权的时间价值和内在价值有关，这里暂时略，后边细说。</p><p>按交易品种的不同，期权还可分为常见的股票期权、期货期权、股指期权…。</p><h2 id="3、期权的定价"><a href="#3、期权的定价" class="headerlink" title="3、期权的定价"></a>3、期权的定价</h2><p>一份期权合约的价值由其外在价值和内在价值组成。</p><h3 id="3-1-内在价值-Intrinsic-Value"><a href="#3-1-内在价值-Intrinsic-Value" class="headerlink" title="3.1 内在价值 Intrinsic Value"></a>3.1 内在价值 Intrinsic Value</h3><p>内在价值反映期权持有者马上执行期权可以获得的收益。内在价值不受外部因素干扰，仅与股票现价和行权价有关。</p><p>根据内在价值的不同，期权又可以划分为：</p><ul><li><strong>实值期权</strong>（价内）（in the money option / ITM，内在价值&gt;0）</li><li><strong>平值期权</strong>（平价）（at the money option / ATM，内在价值=0）</li><li><strong>虚值期权</strong>（价外）（out of money option / OTM，内在价值&lt;0）</li></ul><h3 id="3-2-外在价值-Extrinsic-Value"><a href="#3-2-外在价值-Extrinsic-Value" class="headerlink" title="3.2 外在价值 Extrinsic Value"></a>3.2 外在价值 Extrinsic Value</h3><p>外在价值由期权的 <strong>时间价值 (Times Value)</strong> 和 <strong>隐含波动率 (Implied Volatility )</strong> 组成，即期权费减去期权的内在价值后的剩余部分。</p><p>反映了期权合约购买者对资产价格波动的不确定性付出的代价。</p><p>资产价格波动越高，期权距离到期日的时间越长，期权价格越高。</p><p>关于隐含波动率的更详细解释请见后文。</p><h1 id="二、CALL"><a href="#二、CALL" class="headerlink" title="二、CALL"></a>二、CALL</h1><h2 id="2-1-看涨期权定义"><a href="#2-1-看涨期权定义" class="headerlink" title="2.1 看涨期权定义"></a>2.1 看涨期权定义</h2><p>看涨期权给予买家在某一天(交割日 expiration)之前，以一个约定的价格(行权价 strike price) <strong>购买</strong> 标的资产的 <strong>权利</strong>；</p><p>看涨期权的价格即买方需要支付的权利金(premium)；卖方收入权利金，同时有<strong>义务</strong>按照约定价格<strong>卖出</strong>标的资产。</p><h2 id="2-2-定价"><a href="#2-2-定价" class="headerlink" title="2.2 定价"></a>2.2 定价</h2><p>看涨期权的价格分为三个部分：</p><ul><li>价格（内在价值）</li><li>时间（外在价值）</li><li>隐含波动率（外在价值） </li></ul><p>三个因素按照不同的比例混合，也就产生了不同的期权合约。</p><h3 id="a-内在价值"><a href="#a-内在价值" class="headerlink" title="a. 内在价值"></a>a. 内在价值</h3><p>内在价值不受外部因素影响，仅和标的资产价格涨跌有关；对于 CALL 来说，<strong>内在价值 = 股票现价 - 行权价</strong>，且不小于 0。</p><h3 id="b-时间价值"><a href="#b-时间价值" class="headerlink" title="b. 时间价值"></a>b. 时间价值</h3><p>时间价值随着期权合约到期日的临近，以一定的速度 <em>(Theta)</em> 减少；距离行权日越近，时间价值减少的速度越快。</p><p>对于买家来说，期望标的资产价格上涨的速度高于时间价值的流逝速度；</p><p>也正是由于时间价值的存在，有时即便标的资产上涨，买家也无法盈利，即，标的资产价格上涨的速度小于时间价值流逝速度。</p><h3 id="c-隐含波动率"><a href="#c-隐含波动率" class="headerlink" title="c. 隐含波动率"></a>c. 隐含波动率</h3><p>隐含波动率上升，期权的价格也随着上升。</p><p>对于买家来说，希望 IV 上升，即自己在 IV 低位买入了期权，期权价格会涨；</p><p>而对于卖家来说，希望 IV 下跌，即自己在 IV 高位卖出了期权。</p><h2 id="2-3-到期损益"><a href="#2-3-到期损益" class="headerlink" title="2.3 到期损益"></a>2.3 到期损益</h2><p>由于看涨期权买家有权利买入标的资产，那么买家对标的资产的预期价格是 <strong>上涨</strong> 的；</p><p>而卖家有义务卖出标的资产，卖家对标的资产的价格预期是 <strong>下跌</strong> 的。</p><p>以 AAPL 的看涨期权为例，粗略计算一下合约到期时多头和空头的大致损益情况。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnniy6gpv6j30jq0egdi7.jpg" alt="image-20210215002354351" style="zoom: 67%;" /><p>当前苹果每股报价 $135.37，5 天后到期，行权价格为 $130 的看涨期权合约报价为 $5.79 / 股。</p><ul><li>多头损益情况</li></ul><p>假设本金为 $ 2000，选择买入 3 张看涨期权，期初时需要支付的权利金约为 $1737。</p><p>考虑交易成本的情况下：</p><p>当正股价格 &gt;$135.79 时，收益为 (正股价格 - $130) * 300 股 - $1737 权利金，收益无上限；对比全仓买入 14 股正股，期权的杠杆效应明显；</p><p>当正股价格 =$135.79 时，此时为平值期权，盈利为0；</p><p>当正股价格 &lt;$135.79 时，此时为虚值期权，最大亏损为全部的权利金 $1737。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnnj0oewz5j30j60e4aba.jpg" alt="image-20210215002618491" style="zoom: 67%;" /><ul><li>空头损益情况</li></ul><p>假设期初卖出 3 张看涨期权，那么收到权利金 $1737。</p><p>当正股价格 &gt;$135.79 时，对手方选择行权，此时亏损为 (正股价格-$130) * 300 股 + $1737 权利金，亏损无下限！</p><p>当正股价格 =$135.79时，此时为平值期权；</p><p>当正股价格 &lt;$135.79 时，此时最大收益为全部的权利金 $1737 。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnnj6o824bj30j60eaq45.jpg" alt="image-20210215003203908" style="zoom:67%;" /><p>对于看涨期权的多头来说，最大收益无上限，最大亏损有下限（全部权利金）；</p><p>对于看涨期权的空头来说，最大收益为全部权利金，而最大亏损可能没有下限！</p><p><strong>划重点</strong>：<u>裸卖看涨期权（Naked Call Selling，不持有对应的正股而卖出看涨期权）风险极大，当正股价格暴涨时，可能出现<strong>无下限的亏损</strong>！</u></p><h1 id="三、PUT"><a href="#三、PUT" class="headerlink" title="三、PUT"></a>三、PUT</h1><h2 id="3-1-看跌期权定义"><a href="#3-1-看跌期权定义" class="headerlink" title="3.1 看跌期权定义"></a>3.1 看跌期权定义</h2><p>看跌期权给予买家在某一天(交割日 expiration)之前，以一个约定的价格(行权价 strike price) <strong>卖出</strong> 标的资产的 <strong>权利</strong>；</p><p>看跌期权的价格即买方需要支付的权利金(premium)；而卖方收入权利金，在期权到期时，如果买方选择行权，卖方有 <strong>义务</strong> 按照约定价格 <strong>买入</strong> 标的资产。</p><h2 id="3-2-定价"><a href="#3-2-定价" class="headerlink" title="3.2 定价"></a>3.2 定价</h2><p>PUT 内在价值计算方法与 CALL 相反，即 <strong>内在价值 = 行权价 - 股票现价</strong>；</p><p>标的资产价格下跌，看跌期权内在价值上涨，赚行权价和正股价格之间的差价。</p><p>时间价值 和 IV 的变化对 PUT 价格的影响与CALL 一致。</p><h2 id="3-3-到期损益"><a href="#3-3-到期损益" class="headerlink" title="3.3 到期损益"></a>3.3 到期损益</h2><p>看跌期权买家有权利<strong>卖出</strong>标的资产，那么买家对标的资产的预期价格是 <strong>下跌</strong> 的；</p><p>而卖家有义务<strong>买入</strong>标的资产，卖家对标的资产的价格预期是 <strong>上涨</strong> 的。</p><p>还是以苹果的期权举例，1 周后到期，行权价为 $150 的看跌期权，报价 $15.13 / 股。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnnk31mpt4j30jo0eqdi7.jpg" alt="image-20210215005116408" style="zoom:67%;" /><ul><li>多头损益情况</li></ul><p>假设本金还是 $2000，买入了 1 份看跌期权，期初支付权利金 $1475。</p><p>考虑交易费用，当正股价格 &gt;$135.25 时，选择不行权，最大亏损权利金 $1475;</p><p>当正股价格 =$135.25 时，此时为平值期权，无盈利；</p><p>当正股价格 &lt;$135.25 时，此时行权，盈利为($150 - 正股价格)*100股 - $1475 权利金，正股越跌越赚钱，最大收益有上限。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnnjszns3fj30jm0dowfp.jpg" alt="image-20210215005330923" style="zoom:67%;" /><ul><li>空头损益情况</li></ul><p>空头期初卖出 1 张看跌期权，收到权利金 $1513。</p><p>当正股价格 &gt;$134.87 时，对手方不行权，最大盈利为全部权利金 $1513;</p><p>当正股价格 =$134.87 时，此时为平值期权，无内在价值;</p><p>当正股价格 &lt;$134.87 时，此时对手方选择行权，亏损为(正股价格 - $150)*100股 + $1513 权利金，最大亏损有下限。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnnjv5uco3j30je0dymyd.jpg" alt="image-20210215005535896" style="zoom:67%;" /><p>卖 PUT 的操作比喻成保险非常形象，空头保股价为多少，当股价涨超一个价格时，空头“理赔”的方式即以高于正股现价的价格买入股票。</p><h1 id="四、希腊值"><a href="#四、希腊值" class="headerlink" title="四、希腊值"></a>四、希腊值</h1><p>我们知道影响期权价格的三要素：时间、行权价、隐含波动率。</p><p>期权的希腊值是一系列计算这三要素对期权价格进行影响的变量，他们可以从期权的定价公式中推导出来，希腊值对管理头寸来说是非常重要的参考。</p><h2 id="4-1-期权定价公式"><a href="#4-1-期权定价公式" class="headerlink" title="4.1 期权定价公式"></a>4.1 期权定价公式</h2><p>目前给期权定价比较常见的是 B-S 期权定价模型。</p><p>B-S 模型假定股票价格波动符合正态分布的情况下，对三要素进行一系列的计算，推算出期权价格。关于 B-S 公式详细的解释见参考链接。</p><p>B-S 模型共有 6 个变量：行权日、行权价、标的资产现价、无风险利率、期权价格，交易软件上已经带了这个功能。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gno9jn2oa2j30wk0gsagp.jpg" alt="image-20210215154406068" style="zoom: 40%;" /><p>期权的几个希腊值也是通过期权的定价公式推导得来。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnphz5kup2j30jq0eiwgv.jpg" alt="image-20210216172122376" style="zoom:60%;" /><h2 id="4-2-Delta"><a href="#4-2-Delta" class="headerlink" title="4.2 Delta"></a>4.2 Delta</h2><p>Delta 为衡量期权对股价变化的敏感度，取值范围在 -1 到 1 之间。</p><p>例如 股价变动 $1 ，那么期权价格变动 delta * 股价变动。</p><p>假设一份期权合约包含 100 股，那么一份合约的 delta 可以表述为 -100 到 100 之间的数字。</p><p>另外一个思考 delta 的角度是，delta 为我们 “实际”控制的股权。比如，当前 delta 为 50 ,那么股价上涨 $1,期权合约中的 100 股每股上涨 $0.5 ，相当于 50 股上涨的幅度，即我们通过期权合约“实际”控制 50 股。</p><ul><li><p>对于平价期权来说，delta = 0.5，在期权链中如果不好确定哪个是平价期权是，可以通过 delta 最接近 0.5 来快速确定平价期权。</p></li><li><p>对于深度价内期权，delta &gt;= 80；</p></li><li><p>对于深度价外期权，delta &lt;=20；</p></li><li><p>对于 CALL 来说，delta 为正，股票上涨赚钱；PUT 则相反。</p></li></ul><h2 id="4-3-Gamma"><a href="#4-3-Gamma" class="headerlink" title="4.3 Gamma"></a>4.3 Gamma</h2><p>Gamma 为 delta 的导数，反映 delta 变化的速度。</p><p>因此 Gamma 对于 call 和 put 来说均为正值。对期权买家来说，Gamma 为正，而对卖家来说则为负。</p><p>例如，当前期权 delta 为 0.4，Gamma 为 0.05，那么当股票价格上涨 $1 时，delta 上涨到 0.45，此时我们“实际”控制的股份从 40 股变成了 45 股。Gamma 相当于为我们免费加了杠杆。</p><p>Gamma 是期权杠杆性的根本。</p><h2 id="4-4-Theta"><a href="#4-4-Theta" class="headerlink" title="4.4 Theta"></a>4.4 Theta</h2><p>Theta 指时间对期权价格的影响。</p><p>对于买入期权来说，theta 始终为负，因为随着时间的推移，期权的时间价值会损失掉；而卖出期权则刚好相反，随着时间推移，每一天都可以赚到theta。</p><p>期权的时间损耗，随着到期日的临近而逐渐加速，theta 变化曲线如下图所示。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnphh4xvvij30sa0e876n.jpg" alt="image-20210216170401449" style="zoom:50%;" /><h2 id="4-5-Vega"><a href="#4-5-Vega" class="headerlink" title="4.5 Vega"></a>4.5 Vega</h2><p>Vega 指隐含波动率对期权价格的影响。隐含波动率每变动 1% * Vega = 期权价格的变动。</p><p>对于期权买家来说，vega 为正，而对卖家来说，vega为负。</p><p>平价期权 Vega 最高。</p><h2 id="4-6-杠杆比率"><a href="#4-6-杠杆比率" class="headerlink" title="4.6 杠杆比率"></a>4.6 杠杆比率</h2><p>杠杆比率指的是通过购买期权，我们控制的股份和实际购买正股的比例。</p><p>例如上边那个高通的 CALL，一份期权合约为 $5.63，购买期权花费 $563，delta 为0.692 ，那么相当于实际控制约 69 股；而如果按正股现价买入 69 股则需要约$10200，$10200 除权利金即为杠杆比率。</p><h1 id="五、隐含波动率"><a href="#五、隐含波动率" class="headerlink" title="五、隐含波动率"></a>五、隐含波动率</h1><h2 id="5-1-历史波动率-Historical-Volatility"><a href="#5-1-历史波动率-Historical-Volatility" class="headerlink" title="5.1 历史波动率 Historical Volatility"></a>5.1 历史波动率 Historical Volatility</h2><p>历史波动率 指一年的时间里，标的资产价格发生波动的年化标准差（Annualized Standard Deviation），它统计了过去一年里，标的资产每天发生波动的幅度，得出波动幅度的标准差。</p><p>历史波动率越大，标的资产价格过去波动程度越大。</p><h2 id="5-2-隐含波动率-Implied-Volatility"><a href="#5-2-隐含波动率-Implied-Volatility" class="headerlink" title="5.2 隐含波动率 Implied Volatility"></a>5.2 隐含波动率 Implied Volatility</h2><p>隐含波动率（IV）从期权的价格中衍生得来，它代表着目前市场参与者们对标的资产<strong>未来价格变化幅度大小做出的预期</strong>,IV 越高，期权价格越高。</p><p>隐含波动率的上升通常由两种情况导致：</p><ol><li>期权供不应求，造成期权价格的上涨（例如财报时）</li><li>标的股票大跌</li></ol><p>那么怎么判断 IV 当前是高位还是低位？一般来说可以和平价期权的波动率进行对比，更准确些可以借助  IV percentile (IVP) 来判断 IV 的相对标准。</p><p>隐含波动率不仅告诉我们未来的市场风险或机遇，同时也可以计算出一笔交易的成功率。</p><p>举个例子，我们看涨 BILI 这只股票，BILI 的现价为 $153.12，我的目标价格是 $160，那么通过隐含波动率，可以推算出 BILI 按照当前期权链价格推算，将会在什么时候到达 $160。</p><h2 id="5-3-IV-对期权价格的影响"><a href="#5-3-IV-对期权价格的影响" class="headerlink" title="5.3 IV 对期权价格的影响"></a>5.3 IV 对期权价格的影响</h2><p>参考平价期权 CALL 和 PUT 的价格，假定股票价格波动符合正态分布，那么可以推算出市场对未来一段时间内股价波动的预期。</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnoafv3bm3j30ts0gkn2g.jpg" alt="image-20210215161504052" style="zoom: 67%;" /><p>例如 CRM，平价期权如下：</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnpmt7t3txj31n90u0aos.jpg" alt="image-20210216200838932" style="zoom:67%;" /><p>CALL 和 PUT 价格相加 $18 ，那么接下来的 10 天内，CRM 有 68.5% 的概率在 +/-$18 之间波动。</p><h1 id="六、基本交易策略"><a href="#六、基本交易策略" class="headerlink" title="六、基本交易策略"></a>六、基本交易策略</h1><h2 id="6-1-Long-Call"><a href="#6-1-Long-Call" class="headerlink" title="6.1 Long Call"></a>6.1 Long Call</h2><p>这种策略为最基本的期权策略，但同时也是风险最大的策略。</p><ul><li>策略的组成：买入看涨期权。</li><li>策略的应用：预期标的资产价格会 <strong>迅速上涨</strong>。</li><li>优点：杠杆效应明显，可以使用少量资金控制大量股票，收益理论上无上限（标的资产价格上涨无上限），而亏损有下限（全部的权利金）。</li><li>缺点：风险高。<strong>该策略需要标的资产价格的上涨速度 大于 期权时间价值流逝的速度</strong>。</li><li>盈亏平衡点：期权到期时，标的资产价格 = 行权价 + 权利金。</li></ul><h3 id="策略操作要点"><a href="#策略操作要点" class="headerlink" title="策略操作要点"></a>策略操作要点</h3><ol><li>通常情况下，购买 delta &gt; 0.65 的 CALL （关于 delta 的解释见后文）；</li><li>通常选择每月的标准合约（行权日在每月的第三个星期五）；</li><li>观察该期权的持仓量，如果需要买 x 个 CALL，持仓量至少要是 x 的 15 - 20 倍；</li><li>给期权预留足够的时间（30 -50 天），时间越长，时间价值的流失速度越慢。</li></ol><h2 id="6-2-Long-Put"><a href="#6-2-Long-Put" class="headerlink" title="6.2 Long Put"></a>6.2 Long Put</h2><p>这种策略和刚才的 Long Call 很像，也是为最基本的期权策略，但同时也是风险最大的策略。</p><ul><li>策略的组成：买入看跌期权。</li><li>策略的应用：预期标的资产价格会 <strong>迅速下跌</strong>。</li><li>优点：杠杆效应明显，可以使用少量资金控制大量股票，收益有上限（标的资产价格最多跌到 0），亏损有下限（全部权利金）。</li><li>缺点：风险高。<strong>该策略需要标的资产价格的 下跌速度 大于 期权时间价值流逝的速度</strong>。</li><li>盈亏平衡点：期权到期时，标的资产价格 = 行权价 - 权利金。</li></ul><h2 id="6-3-Covered-Call"><a href="#6-3-Covered-Call" class="headerlink" title="6.3 Covered Call"></a>6.3 Covered Call</h2><p>这种策略是一种收入策略，利用已有的持仓股票获得额外收益。</p><ul><li>策略的组成：持仓标的资产同时卖出看涨期权。</li><li>策略的应用：预期标的资产<strong>横盘</strong>或<strong>温和上涨/下跌</strong>。</li><li>优点：在持仓资产长期横盘的情况下，通过权利金可以获得额外收益；在持仓资产下跌时，通过权利金可以弥补一定的损失。</li><li>缺点：预测错误时，标的资产价格大幅上涨/下跌，导致头寸受到很大影响。</li></ul><p>这种策略可以理解成租赁关系，把自己持仓资产租给买方，收获租金。收益比方向性的策略少，但是比单纯买入股票多，而且盈利概率大。</p><h3 id="策略操作要点-1"><a href="#策略操作要点-1" class="headerlink" title="策略操作要点"></a>策略操作要点</h3><ol><li>正股股价需要波动率比较低；</li><li>可以选择剩余时间在 20-50 天左右，delta 在 0.4-0.3 的期权进行卖出，距离到期日 1 周左右的时候 rollover 期权，此时盈利为收入的权利金和买入期权的差价；</li><li>也可以选择剩余时间 1 周左右的期权，期权过期时收入权利金，每周操作一次。</li><li>Covered Call 策略在慢牛行情中表现最好，既可以收入权利金，也可以享受正股缓慢上涨的收益。</li></ol><h2 id="6-4-Naked-Put-Selling"><a href="#6-4-Naked-Put-Selling" class="headerlink" title="6.4 Naked Put Selling"></a>6.4 Naked Put Selling</h2><p>这种策略理解成我们是卖保险，保的是股价高于一个价格，买家给我们交保费，如果股价跌破某个价格，那么我们有义务买回来股票。</p><ul><li><p>策略的组成：账户中准备好保证金，同时卖出看跌期权。</p></li><li><p>策略的应用：对标的资产长期看涨，预期标的资产在一段时间内会<strong>横盘</strong>或<strong>温和上涨/下跌</strong>。</p></li><li><p>优点：资产价格横盘/温和上涨/温和下跌时都可以盈利，风险相对较低，且盈利概率较高。</p></li><li><p>缺点：标的资产价格剧烈波动时，可能损失全部权利金。</p></li></ul><p>这种策略很适合想买一个股票，又嫌他现价太贵的时候，比如 QCOM 现价 $147.98 ，而我想在 $140 买入，那么可以选择卖出行权价在 $140 的 PUT。如果在期权到期时 QCOM 跌到了 $140以下，我并不介意以 $140 的价格买入，因为我的预期是 QCOM 长期来看一定是上涨的；如果到期时 QCOM 继续上涨或者横盘，那我也可以稳稳的收入权利金。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>《金融工程概论》对外经贸大学，</br> <a href="https://www.icourse163.org/course/UIBE-1206446827?tid=1206784243">https://www.icourse163.org/course/UIBE-1206446827?tid=1206784243</a></li><li>期权入门 - 老虎社区，</br> <a href="https://www.laohu8.com/college/column/C20181129031512065">https://www.laohu8.com/college/column/C20181129031512065</a></li><li>How high is high? The IV percentile - Medium，</br> <a href="https://besensibull.medium.com/how-high-is-high-the-iv-percentile-11c8d80840b5">https://besensibull.medium.com/how-high-is-high-the-iv-percentile-11c8d80840b5</a></li><li>课程：4节课带你进阶期权实战 - 老虎社区，</br> <a href="https://www.laohu8.com/college/column/C20201125035657657">https://www.laohu8.com/college/column/C20201125035657657</a></li><li>布莱克-舒尔斯模型 - Wikipedia，</br> <a href="https://zh.wikipedia.org/zh-hans/%E5%B8%83%E8%8E%B1%E5%85%8B-%E8%88%92%E5%B0%94%E5%85%B9%E6%A8%A1%E5%9E%8B">https://zh.wikipedia.org/zh-hans/%E5%B8%83%E8%8E%B1%E5%85%8B-%E8%88%92%E5%B0%94%E5%85%B9%E6%A8%A1%E5%9E%8B</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、期权概念与基础知识&quot;&gt;&lt;a href=&quot;#一、期权概念与基础知识&quot; class=&quot;headerlink&quot; title=&quot;一、期权概念与基础知识&quot;&gt;&lt;/a&gt;一、期权概念与基础知识&lt;/h1&gt;&lt;h2 id=&quot;1、期权的定义与特点&quot;&gt;&lt;a href=&quot;#1、期权的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;1、期权的定义与特点&quot;&gt;&lt;/a&gt;1、期权的定义与特点&lt;/h2&gt;&lt;h3 id=&quot;1-1-期权的定义&quot;&gt;&lt;a href=&quot;#1-1-期权的定义&quot; class=&quot;headerlink&quot; title=&quot;1.1 期权的定义&quot;&gt;&lt;/a&gt;1.1 期权的定义&lt;/h3&gt;&lt;p&gt;期权合约是赋予持有者拥有在&lt;strong&gt;将来某一时间&lt;/strong&gt;，以某一&lt;strong&gt;确定的价格&lt;/strong&gt;购买/出售标的资产的权利。&lt;/p&gt;
&lt;p&gt;对于期权合约的买方来说，他有相应的&lt;strong&gt;权利&lt;/strong&gt;，而没有&lt;strong&gt;义务&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;对于期权合约的卖方来说，他有相应的&lt;strong&gt;义务&lt;/strong&gt;，而没有&lt;strong&gt;权利&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;期权买卖的双方权利与义务并不对等，在合约到期时，买方拥有行权或放弃行权的权利；而卖方有义务去满足买方行权的需求，却没有权利要求买方行权或放弃。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="金融&amp;理财" scheme="https://misscoconut.github.io/tags/%E9%87%91%E8%9E%8D-%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Adb-Server 远程连接</title>
    <link href="https://misscoconut.github.io/2020/09/03/adb-server%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>https://misscoconut.github.io/2020/09/03/adb-server%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-09-03T01:38:34.000Z</published>
    <updated>2020-09-05T14:40:47.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h1><p>最近的项目里遇到个奇葩需求。</p><p>有一堆手机们用 USB 线连接到了一台开发机上，现在有另外一些机器，需要通过网络远程连接到这些手机上，并且能直接连上 adb 执行命令。</p><p>我第一反应是<code>adb connect ip:port</code>，但仔细一想好像不太对，这种方式需要手机开了网络调试，而且绕过开发机直接连手机，也不符合目前需求。</p><p>网上搜了下，大多数 adb 远程连接指的都是通过<code>adb connect</code>的这种连接方式，而如何连接到远程机器上的 USB 设备却没有太多的资料。</p><a id="more"></a><h1 id="0x02-adb-架构及工作原理"><a href="#0x02-adb-架构及工作原理" class="headerlink" title="0x02 adb 架构及工作原理"></a>0x02 adb 架构及工作原理</h1><p>为了解决这个需求，首先要了解下 adb 的架构和工作原理。</p><h2 id="adb-架构"><a href="#adb-架构" class="headerlink" title="adb 架构"></a>adb 架构</h2><p>adb 从架构上来看大致长这样：</p><img src="https://i.loli.net/2020/09/05/C27Egj3YvyrNsXH.png" alt="image-20200905220532680" style="zoom:67%;" /><ul><li>adbd ：运行在手机上的后台常驻进程，由 <code>init</code> 负责启动，等待 adb-server 连接；</li><li>adb-server：运行在开发机上的后台常驻进程，默认监听本地 5037 端口，等待 adb-client 连接，负责管理所有连接的设备；</li><li>adb-client：运行在开发机上，可通过 shell 调用，对 adb-server 连接的设备进行操作。</li></ul><h2 id="adb-工作原理"><a href="#adb-工作原理" class="headerlink" title="adb 工作原理"></a>adb 工作原理</h2><p>adb-server 在开发机上，后台常驻进程，默认监听本地 <em>localhost:5037</em> 端口。用户每次从 shell 执行 adb 命令，将会在本地启动一个 adb-client 进程，adb-client 负责建立一对儿 socket 连接，与本地的 adb-server 进行通信，使用基于 tcp 的 adb 私有协议。</p><p><img src="https://i.loli.net/2020/09/03/mnWYSi9zIw23QVA.png" alt="image-20200903091922452"></p><p>adb-client 启动时会去找本地的 adb-server 实例，如果没有，会试图启动一个。<strong>实际上，adb-server 和 adb-client 是同一个可执行文件</strong>(<em>adb</em>)。</p><p>adb-server 和 adbd 之间通讯可以通过 USB 口或网络进行连接，同样使用基于 TCP 的 adb 私有协议进行通讯，每个设备中的 adbd 只能连接一个 adb-server。</p><p><img src="https://i.loli.net/2020/09/05/RjIvts1k6Fy893O.png" alt="image-20200905220433628"></p><p>adb-server 和 adb-client 之间的连接，绝大多数情况下都是跑在同一台机器上，但我们目前的场景下，adb-server 运行在内网的一台开发机上，adb-client 需要在某个 docker 实例中，<strong>这种 adb-server 和 adb-client 不在一台机器上的情况，翻了好久文档也没找到连接方法。</strong></p><h1 id="0x03-解决方案"><a href="#0x03-解决方案" class="headerlink" title="0x03 解决方案"></a>0x03 解决方案</h1><p>仔细看 <em>adb –help</em> 的输出：</p><p><img src="https://i.loli.net/2020/09/03/OtEe25KGY9ga3UN.png" alt="image-20200903092807405"></p><p><em>-a -H</em> 和 <em>-P</em> 这三个选项没用过，但看上去和我们的情况沾边儿。</p><p>但是文档中并没有这几个选项的任何说明，也没有给出如何以 server / client 方式启动 adb，而 <em>–help</em> 又输出了这样的选项，那么我们翻一翻 adb 源码，看下怎么整。</p><p><a href="https://android.googlesource.com/platform/system/core/+/master/adb/client/commandline.cpp">https://android.googlesource.com/platform/system/core/+/master/adb/client/commandline.cpp</a></p><p><code>adb_commandline()</code> 这个方法中，找一找 -a、-H、-P 参数后面的逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">adb_commandline</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> no_daemon = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> is_daemon = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> is_server = <span class="literal">false</span>;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">while</span> (argc &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"server"</span>)) &#123;</span><br><span class="line">            is_server = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"nodaemon"</span>)) &#123;</span><br><span class="line">            no_daemon = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"fork-server"</span>)) &#123;</span><br><span class="line">            <span class="comment">/* this is a special flag used only when the ADB client launches the ADB Server */</span></span><br><span class="line">            is_daemon = <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"-a"</span>)) &#123;</span><br><span class="line">            gListenAll = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(argv[<span class="number">0</span>], <span class="string">"-H"</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (argv[<span class="number">0</span>][<span class="number">2</span>] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) error_exit(<span class="string">"-H requires an argument"</span>);</span><br><span class="line">                server_host_str = argv[<span class="number">1</span>];</span><br><span class="line">                argc--;</span><br><span class="line">                argv++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                server_host_str = argv[<span class="number">0</span>] + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(argv[<span class="number">0</span>], <span class="string">"-P"</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (argv[<span class="number">0</span>][<span class="number">2</span>] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) error_exit(<span class="string">"-P requires an argument"</span>);</span><br><span class="line">                server_port_str = argv[<span class="number">1</span>];</span><br><span class="line">                argc--;</span><br><span class="line">                argv++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                server_port_str = argv[<span class="number">0</span>] + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现了<code>server</code> <code>nodaemon</code> 这两个参数，继续往后看代码，发现以这两个参数启动 adb ，adb 将会以 adb-server 模式启动，并从标准输入接收数据，符合我们在插手机的开发机上的需求。</p><p>而需要远程连接的机器上，指定 <em>-P port</em> 和 <em>-H host</em> 为开发机上的 adb-server 即可。</p><ul><li>最终启动命令</li></ul><blockquote><p>插手机的开发机上：<code>adb -a -P {port} nodaemon server</code></p></blockquote><blockquote><p>远程 adb-client 中：<code>adb -H {device_proxy_ip} -P {port} {其他 adb 命令}</code></p></blockquote><ul><li>测试一下</li></ul><p>插手机的开发机上：</p><p><img src="https://i.loli.net/2020/09/03/gpaljD6xfzAS5Cy.png" alt="image-20200903093548536"></p><p>线没插好，忽视报错，重新插拔 USB 线即可。</p><p>远程 adb-client 上：</p><p><img src="https://i.loli.net/2020/09/03/ulP2HWOZyKE7RBb.png" alt="image-20200903093711504"></p><p>连接正常。</p><p>至此解决 adb-server 和 adb-client 之间通过网络远程连接。</p><p>实际上，<a href="https://android.googlesource.com/platform/system/core/+/master/adb/SOCKET-ACTIVATION.txt">https://android.googlesource.com/platform/system/core/+/master/adb/SOCKET-ACTIVATION.txt</a>  这里有给出这种方式启动 adb 的例子，捉迷藏一样，interesting.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x01-背景&quot;&gt;&lt;a href=&quot;#0x01-背景&quot; class=&quot;headerlink&quot; title=&quot;0x01 背景&quot;&gt;&lt;/a&gt;0x01 背景&lt;/h1&gt;&lt;p&gt;最近的项目里遇到个奇葩需求。&lt;/p&gt;
&lt;p&gt;有一堆手机们用 USB 线连接到了一台开发机上，现在有另外一些机器，需要通过网络远程连接到这些手机上，并且能直接连上 adb 执行命令。&lt;/p&gt;
&lt;p&gt;我第一反应是&lt;code&gt;adb connect ip:port&lt;/code&gt;，但仔细一想好像不太对，这种方式需要手机开了网络调试，而且绕过开发机直接连手机，也不符合目前需求。&lt;/p&gt;
&lt;p&gt;网上搜了下，大多数 adb 远程连接指的都是通过&lt;code&gt;adb connect&lt;/code&gt;的这种连接方式，而如何连接到远程机器上的 USB 设备却没有太多的资料。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="android" scheme="https://misscoconut.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Celery 任务调度</title>
    <link href="https://misscoconut.github.io/2020/08/18/celery/"/>
    <id>https://misscoconut.github.io/2020/08/18/celery/</id>
    <published>2020-08-17T18:09:49.000Z</published>
    <updated>2020-08-18T17:41:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Celery"><a href="#1-Celery" class="headerlink" title="1. Celery"></a>1. Celery</h2><p>Celery 是一个 Python 分布式任务调度模块，支持实时处理异步消息队列，稳定高效易上手。 </p><h3 id="模块架构"><a href="#模块架构" class="headerlink" title="模块架构"></a>模块架构</h3><p>Celery 模块架构如下：</p><p><img src="https://i.loli.net/2020/08/17/Nd4bmazQgtkCvKV.png" alt="image-20200817010421489"></p><a id="more"></a><h3 id="1-任务生产者-task-producer"><a href="#1-任务生产者-task-producer" class="headerlink" title="1 - 任务生产者 (task producer)"></a>1 - 任务生产者 (task producer)</h3><p>调用 Celery 提供的 API，产生任务并交给任务队列处理的应用，一段 py 代码、一个 API 请求都可。</p><h3 id="2-任务调度器-celery-beat"><a href="#2-任务调度器-celery-beat" class="headerlink" title="2 - 任务调度器 (celery beat)"></a>2 - 任务调度器 (celery beat)</h3><p>Celery beat 是 Celery 系统自带的任务生产者，用于执行预先定义的定时任务。</p><h3 id="3-任务代理-broker"><a href="#3-任务代理-broker" class="headerlink" title="3 - 任务代理 (broker)"></a>3 - 任务代理 (broker)</h3><p>消息队列中间件，Celery 官方推荐使用 rabbitmq，redis 也可做消息队列，在对稳定性要求不严格时可选。</p><h3 id="4-任务消费方-celery-worker"><a href="#4-任务消费方-celery-worker" class="headerlink" title="4 - 任务消费方 (celery worker)"></a>4 - 任务消费方 (celery worker)</h3><p>真正执行工作任务的。一个 worker 对应一个进程。Celery 几乎用了各种能用上的异步手段来提高并发任务的性能。</p><p>Celery 支持分布式部署和横向扩展，可以通过在多个节点增加 worker 的数量来增加系统的高可用性，也可以在不同节点上分配执行不同任务的 worker 来达到模块化的目的。</p><h3 id="5-结果保存"><a href="#5-结果保存" class="headerlink" title="5 - 结果保存"></a>5 - 结果保存</h3><p>Celery 支持任务处理完后将状态信息和结果的保存，以供查询。Celery 内置支持 rpc, Django ORM，Redis，RabbitMQ 等方式来保存任务处理后的状态信息。另外，Celery 还支持各种参加的序列化方式。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip install -U Celery</code></p><h2 id="2-本地任务调用"><a href="#2-本地任务调用" class="headerlink" title="2. 本地任务调用"></a>2. 本地任务调用</h2><p>hello celery，这里参考官方文档，任务在本地，了解 Celery 调度任务的流程。</p><p>为了简单，这里 broker (消息队列中间件) 和 backend (保存任务结果的地方) 都用 redis，存放在不同的库里。</p><h3 id="消费者进行消费"><a href="#消费者进行消费" class="headerlink" title="消费者进行消费"></a>消费者进行消费</h3><ol><li>启动消息队列中间件；</li><li>消费者定义异步任务方法；</li><li>启动 Celery，Celery 会去完成连接消息队列中间件、创建消息队列、监听队列，等等操作。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># celery_task.py</span></span><br><span class="line"><span class="comment"># Celery task 消费者</span></span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">backend = <span class="string">"redis://0.0.0.0:xxxx/1"</span></span><br><span class="line">broker = <span class="string">"redis://0.0.0.0:Xxxx/2"</span></span><br><span class="line"></span><br><span class="line">coco_celery = celery.Celery(<span class="string">"coconut"</span>, backend=backend, broker=broker)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟耗时操作</span></span><br><span class="line"><span class="meta">@coco_celery.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_sth</span><span class="params">(s)</span>:</span></span><br><span class="line">    time.sleep(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@coco_celery.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_sth_b</span><span class="params">(s)</span>:</span></span><br><span class="line">    time.sleep(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>命令行启动 Celery </p><p> <code>celery worker -A celery_tasks -l info</code></p><p><img src="https://i.loli.net/2020/08/17/OlvauFGtZchHwWs.png" alt="Image"></p><h3 id="生产者发消息"><a href="#生产者发消息" class="headerlink" title="生产者发消息"></a>生产者发消息</h3><ol><li>配置 Celery ，指定 broker &amp; backend ，指定任务队列（可选）；</li><li>import 进来要执行的任务，然后调用 <code>delay()</code>方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># producer_task.py</span></span><br><span class="line"><span class="keyword">from</span> CeleryTest.celery_task <span class="keyword">import</span> do_sth, do_sth_b</span><br><span class="line"></span><br><span class="line">result = do_sth.delay(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">f"worker task end <span class="subst">&#123;result&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">result2 = do_sth_b.delay(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">f"worker task2 end <span class="subst">&#123;result2&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>一个<code>delay ()</code> 方法，Celery 会自动把异步任务函数名、参数等等发送到消息队列。生产者直接运行这个 py 文件就行了。</p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>生产者发送消息后，拿到了任务 id，但是消费者这边报错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[2020-08-17 02:09:24,644: ERROR/MainProcess] Received unregistered task of<span class="built_in"> type </span><span class="string">'CeleryTest.celery_task.do_sth'</span>.</span><br><span class="line">The message has been ignored <span class="keyword">and</span> discarded.</span><br><span class="line"></span><br><span class="line">Did you remember <span class="keyword">to</span> import the module containing this task?</span><br><span class="line"><span class="keyword">Or</span> maybe you<span class="string">'re using relative imports?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please see</span></span><br><span class="line"><span class="string">http://docs.celeryq.org/en/latest/internals/protocol.html</span></span><br><span class="line"><span class="string">for more information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The full contents of the message body was:</span></span><br><span class="line"><span class="string">b'</span>[[3], &#123;&#125;, &#123;<span class="string">"callbacks"</span>: <span class="literal">null</span>, <span class="string">"errbacks"</span>: <span class="literal">null</span>, <span class="string">"chain"</span>: <span class="literal">null</span>, <span class="string">"chord"</span>: <span class="literal">null</span>&#125;]<span class="string">' (78b)</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "d:\workspace\cocotest\venv2\lib\site-packages\celery\worker\consumer\consumer.py", line 562, in on_task_received</span></span><br><span class="line"><span class="string">    strategy = strategies[type_]</span></span><br><span class="line"><span class="string">KeyError: '</span>CeleryTest.celery_task.do_sth<span class="string">'</span></span><br></pre></td></tr></table></figure><p>生产者这边 import 了这两个任务的方法，还是报错找不到这两个 task。</p><p>仔细看 <code>[2020-08-17 02:09:24,644: ERROR/MainProcess] Received unregistered task of type &#39;CeleryTest.celery_task.do_sth&#39;.</code> 和前边消费者启动时候 Celery 找到的任务名不一样….</p><p>问题在目录结构上：</p><p><img src="https://i.loli.net/2020/08/17/xnVfSr1vMokpeLJ.png" alt="image-20200817021434940"></p><p>现在的目录结构是这样，然鹅消费者启动 Celery 的时候命令是  <code>celery worker -A celery_tasks -l info</code> 改成，<code>celery worker -A CeleryTest.celery_task -l info</code> 之后解决。</p><p><img src="https://i.loli.net/2020/08/17/k4iYhUmgCOErzKq.png" alt="image-20200817023126097"></p><h3 id="要注意的地方"><a href="#要注意的地方" class="headerlink" title="要注意的地方"></a>要注意的地方</h3><p>Celery 使用中需要特别注意目录结构，确保 Celery 能识别出来定义的任务。</p><p>典型的目录结构如：</p><p><img src="https://i.loli.net/2020/08/18/cHT3YCt4gGy7l9P.png" alt="image-20200818020535964"></p><p>其中 1 放实际的任务，可以分包组织，注意保证文件名是 <code>tasks.py</code>；</p><p>2 保存 Celery 的各种配置；</p><p>3 中生成 Celery app对象，加载配置等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">"mytasks"</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">"CeleryTest.config"</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks([</span><br><span class="line">    <span class="string">"CeleryTest.recv_task.do_sth"</span>,</span><br><span class="line">    <span class="string">"CeleryTest.send_task.do_sth_b"</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery 根目录下启动</span></span><br><span class="line"><span class="comment"># Celery -A CeleryTest.main worker -l=info</span></span><br></pre></td></tr></table></figure><h2 id="3-远程任务调用"><a href="#3-远程任务调用" class="headerlink" title="3. 远程任务调用"></a>3. 远程任务调用</h2><p>实际生产中，worker 方法 和 调度方法 很可能跑在不同的机器上，在这种情况下，Celery 通过 broker 实现远程任务调度。</p><p>使用起来也比较简单，首先给生产者和消费者指定相同的 broker 和 backend，然后使用 Celery 的任务队列功能规定好任务队列；生产者同样的方法发送消息，worker 在各个节点上跑起来后会自动执行。</p><h3 id="生产者实现"><a href="#生产者实现" class="headerlink" title="生产者实现"></a>生产者实现</h3><ul><li>Celery 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># worker.py 定义 celery app </span></span><br><span class="line">celery_app = Celery(<span class="string">'celery'</span>,</span><br><span class="line">                 broker=BROKER_CONN_URI,</span><br><span class="line">                 backend=BACKEND_CONN_URI,</span><br><span class="line">                 include=[<span class="string">'celery.tasks'</span>]</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="comment"># tasks.py 中定义任务队列</span></span><br><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">CELERY_TIMEZONE=<span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">celery_app.conf.task_queues = (</span><br><span class="line">    Queue(<span class="string">"task_a"</span>, routing_key=<span class="string">'default'</span>),</span><br><span class="line">    Queue(<span class="string">"task_b"</span>, routing_key=<span class="string">'default'</span>),</span><br><span class="line">    Queue(<span class="string">"task_c"</span>, routing_key=<span class="string">'default'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CELERY_ROUTES = (</span><br><span class="line">   [</span><br><span class="line">     <span class="comment"># 将 task_a 任务分配至队列 task_a</span></span><br><span class="line">       (<span class="string">"remote_proj.tasks.task_a"</span>, &#123;<span class="string">"queue"</span>: <span class="string">"task_a"</span>&#125;), </span><br><span class="line">     <span class="comment"># 将 task_b 任务分配至队列 task_b</span></span><br><span class="line">       (<span class="string">"remote_proj.tasks.task_b"</span>, &#123;<span class="string">"queue"</span>: <span class="string">"task_b"</span>&#125;), </span><br><span class="line">     <span class="comment"># 将 task_c 任务分配至队列 task_c</span></span><br><span class="line">       (<span class="string">"remote_proj.tasks.task_c"</span>, &#123;<span class="string">"queue"</span>: <span class="string">"task_c"</span>&#125;)</span><br><span class="line">   ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">"json"</span>  <span class="comment"># 指定任务结果序列化方式</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>  <span class="comment"># 任务结果过期时间</span></span><br></pre></td></tr></table></figure><ul><li>调用远程任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">add_task</span><span class="params">(queue_name: str, params: dict)</span> -&gt; bool:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  :return task ID</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">   task = kcelery.send_task(<span class="string">"task_name"</span>,</span><br><span class="line">                             kwargs=params,</span><br><span class="line">                             queue=<span class="string">"my_task_queue"</span>)</span><br><span class="line">    <span class="keyword">return</span> task</span><br></pre></td></tr></table></figure><p>之后命令行启动 Celery</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">celery</span> -A celery.worker worker -Q my_task_queue  --loglevel=<span class="literal">info</span></span><br></pre></td></tr></table></figure><h3 id="消费者实现"><a href="#消费者实现" class="headerlink" title="消费者实现"></a>消费者实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># worker.py </span></span><br><span class="line"><span class="comment"># 定义 celery app , broker 和 backend 写和生产者一致的</span></span><br><span class="line">celery_app = Celery(<span class="string">'celery'</span>,</span><br><span class="line">                 broker=BROKER_CONN_URI,</span><br><span class="line">                 backend=BACKEND_CONN_URI,</span><br><span class="line">                 include=[<span class="string">'celery.tasks'</span>]</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约定一致的 队列名、任务名</span></span><br><span class="line">celery_app.conf.task_queues = (</span><br><span class="line">   Queue(<span class="string">"task_a"</span>, routing_key=<span class="string">'default'</span>),</span><br><span class="line">    Queue(<span class="string">"task_b"</span>, routing_key=<span class="string">'default'</span>),</span><br><span class="line">    Queue(<span class="string">"task_c"</span>, routing_key=<span class="string">'default'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义具体的任务</span></span><br><span class="line"><span class="meta">@celery_app.task(name="task_a")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_a</span><span class="params">(arg_a: str)</span> -&gt; str:</span></span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment"># 模拟耗时操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"result"</span></span><br></pre></td></tr></table></figure><p>启动 celery 监听队列等待任务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">celery</span> -A ceelry.worker worker -Q scan_task --loglevel=<span class="literal">info</span></span><br></pre></td></tr></table></figure><h2 id="4-flower"><a href="#4-flower" class="headerlink" title="4. flower"></a>4. flower</h2><p>flower 是一个可视化的监控 Celery 任务队列中任务状态的库，安装使用都比较简单。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pip</span> <span class="string">install flower</span></span><br><span class="line"><span class="attr">celery</span> <span class="string">flower -A celery.tasks --port=5555</span></span><br></pre></td></tr></table></figure><p>之后打开浏览器看 <a href="http://0.0.0.0:5555">http://0.0.0.0:5555</a> 即可。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/43768308">https://zhuanlan.zhihu.com/p/43768308</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Celery&quot;&gt;&lt;a href=&quot;#1-Celery&quot; class=&quot;headerlink&quot; title=&quot;1. Celery&quot;&gt;&lt;/a&gt;1. Celery&lt;/h2&gt;&lt;p&gt;Celery 是一个 Python 分布式任务调度模块，支持实时处理异步消息队列，稳定高效易上手。 &lt;/p&gt;
&lt;h3 id=&quot;模块架构&quot;&gt;&lt;a href=&quot;#模块架构&quot; class=&quot;headerlink&quot; title=&quot;模块架构&quot;&gt;&lt;/a&gt;模块架构&lt;/h3&gt;&lt;p&gt;Celery 模块架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/17/Nd4bmazQgtkCvKV.png&quot; alt=&quot;image-20200817010421489&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://misscoconut.github.io/tags/python/"/>
    
      <category term="分布式" scheme="https://misscoconut.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础查缺补漏</title>
    <link href="https://misscoconut.github.io/2020/08/01/Python%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://misscoconut.github.io/2020/08/01/Python%20%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-01T12:18:26.000Z</published>
    <updated>2020-08-02T13:36:05.424Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文知识点比较杂且并不深入，多为自己比较模糊的 python 基础特性。</p><p>感谢组内@RedFree 大佬的无私分享，以下参考组内分享内容和 b 站视频  <a href="https://www.bilibili.com/video/BV1FJ411J7CR">惊呆！Python 竟然还有这样的黑魔法！</a> 整理。</p></blockquote><h1 id="0x01-基本数据类型"><a href="#0x01-基本数据类型" class="headerlink" title="0x01 基本数据类型"></a>0x01 基本数据类型</h1><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 for 迭代变量 in 可迭代对象 if 条件 / for 循环]</span><br></pre></td></tr></table></figure><ul><li><p>带判断条件的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: myList = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br><span class="line">In [<span class="number">32</span>]: myList</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>折腾字典的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: myDict = &#123;<span class="string">'key1'</span>:<span class="string">'v1'</span>,<span class="string">'key2'</span>:<span class="string">'V2'</span>&#125;</span><br><span class="line">In [<span class="number">37</span>]: ret = &#123;key:value <span class="keyword">for</span> value,key <span class="keyword">in</span> myDict.items()&#125;</span><br><span class="line">In [<span class="number">38</span>]: ret</span><br><span class="line">Out[<span class="number">38</span>]: &#123;<span class="string">'v1'</span>: <span class="string">'key1'</span>, <span class="string">'V2'</span>: <span class="string">'key2'</span>&#125;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>嵌套循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: myList = [str(i) + j <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'ABCDE'</span>]</span><br><span class="line">In [<span class="number">41</span>]: print(myList)</span><br><span class="line">[<span class="string">'1A'</span>, <span class="string">'1B'</span>, <span class="string">'1C'</span>, <span class="string">'1D'</span>, <span class="string">'1E'</span>, <span class="string">'2A'</span>, <span class="string">'2B'</span>, <span class="string">'2C'</span>, <span class="string">'2D'</span>, <span class="string">'2E'</span>, <span class="string">'3A'</span>, <span class="string">'3B'</span>, <span class="string">'3C'</span>, <span class="string">'3D'</span>, <span class="string">'3E'</span>, <span class="string">'4A'</span>, <span class="string">'4B'</span>, <span class="string">'4C'</span>, <span class="string">'4D'</span>, <span class="string">'4E'</span>, <span class="string">'5A'</span>, <span class="string">'5B'</span>, <span class="string">'5C'</span>, <span class="string">'5D'</span>, <span class="string">'5E'</span>]</span><br></pre></td></tr></table></figure><p>同理推导式可应用于字典、集合、元组（注意需要用<code>tuple()</code>来定义，直接用<code>()</code>会被当成一个生成器）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: myList = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">In [<span class="number">43</span>]: myList</span><br><span class="line">Out[<span class="number">43</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x04C0D8F0</span>&gt;</span><br><span class="line">In [<span class="number">47</span>]: myList = tuple(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">In [<span class="number">49</span>]: print(myList)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>)</span><br></pre></td></tr></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li><p><code>%s</code> / <code>%5.3f</code> C 语言里边那种形式</p></li><li><p><code>str.format(*args,**kwargs)</code> 可以指定匿名参数/命名参数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: print(<span class="string">'&#123;1&#125; and &#123;0&#125; and &#123;other&#125;'</span>.format(<span class="string">'spam'</span>,<span class="string">'eggs'</span>,other=<span class="string">'aaaaa'</span>))</span><br><span class="line">eggs <span class="keyword">and</span> spam <span class="keyword">and</span> aaaaa</span><br></pre></td></tr></table></figure><ul><li><p><code>f-string</code> python 3.6 引入，特别好用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: fname = <span class="string">'coconut'</span></span><br><span class="line">In [<span class="number">64</span>]: lname = <span class="string">'miss'</span></span><br><span class="line">In [<span class="number">65</span>]: print(<span class="string">f'Hello,<span class="subst">&#123;lname&#125;</span> <span class="subst">&#123;fname&#125;</span>'</span>)</span><br><span class="line">Hello,miss coconut</span><br></pre></td></tr></table></figure></li><li><p>f-string 还可以用在类中</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,fname,lname)</span>:</span></span><br><span class="line">        self.fname = fname</span><br><span class="line">        self.lname = lname</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'hello,<span class="subst">&#123;self.fname&#125;</span> <span class="subst">&#123;self.lname&#125;</span>'</span></span><br><span class="line">person = Person(<span class="string">'coconut'</span>,<span class="string">'miss'</span>)</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;person&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="collections-加强版的数据类型"><a href="#collections-加强版的数据类型" class="headerlink" title="collections 加强版的数据类型"></a>collections 加强版的数据类型</h2><ul><li><p><code>namedtuple</code> 带命名的元组</p></li><li><p><code>deque</code>双向队列</p></li><li><p><code>Counter</code>计数器</p></li><li><p><code>timeit</code> 统计函数执行时间，python自带的</p></li><li><p><a href="https://docs.python.org/zh-cn/3/library/collections.html">https://docs.python.org/zh-cn/3/library/collections.html</a><br>遇到个啥新的数据类型，不要急于造轮子，先看看 python 标准库里边有现成的没。</p></li></ul><h1 id="0x02-函数"><a href="#0x02-函数" class="headerlink" title="0x02 函数"></a>0x02 函数</h1><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><ul><li><code>*args</code> 其他参数，<code>**kwargs</code> 关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">f'args:<span class="subst">&#123;args&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'kwargs:<span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line">func(<span class="string">'a'</span>, <span class="string">'b'</span>, others=<span class="string">'others'</span>)</span><br><span class="line">-----OUTPUT:</span><br><span class="line">args:(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">kwargs:&#123;<span class="string">'others'</span>: <span class="string">'others'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>只是个表达式，一般适用于很简单的函数逻辑（一个表达式），不用给函数起个名了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="keyword">lambda</span> x:x+<span class="number">1</span></span><br><span class="line">print(k(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>参数是函数，返回值还是函数<br>eg. <code>map()</code> <code>filter()</code><br><code>functools</code> 这个包可以参考</p><h2 id="装饰器-decorate"><a href="#装饰器-decorate" class="headerlink" title="装饰器@decorate"></a>装饰器<code>@decorate</code></h2><p>装饰器的参数是被装饰函数。大概理解成 hook 一个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(func.__name__, end - start)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>注意第二行的<code>@wraps</code>注解，这个注解会保留被包装函数的所有元信息（名字、文档、注释等等)，每次定义装饰器的时候不要落下这个。<code>@wraps</code> 把被包装的函数保存在<code>__wrapped__</code> 属性中，可以通过这个属性访问原始函数（例如某次调用想去掉装饰器时）。</p><p>eg. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(func.__name__, end - start)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    foo function</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># time.sleep(5)</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(foo.__doc__) </span><br><span class="line">    foo.__wrapped__()  <span class="comment"># prints nothing</span></span><br></pre></td></tr></table></figure><p>更多装饰器相关，参考:</p><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html</a></p></blockquote><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ul><li>包含 <code>yield</code> 关键字的函数</li><li><strong>协程</strong>   #todo 挖坑待填</li><li>下一个内容<code>next(generator)</code></li><li>输出全部内容 <code>list(generator)</code></li></ul><h1 id="0x03-面向对象编程"><a href="#0x03-面向对象编程" class="headerlink" title="0x03 面向对象编程"></a>0x03 面向对象编程</h1><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li><code>__call__()</code>允许类的实例成为可调用的对象</li><li><code>__iter__()</code> 定义被迭代时的行为</li><li><code>__getitem__()</code> 使用<code>[key]</code>调用时的行为</li><li><code>__str__()</code> vs. <code>__repr__()</code><br>  简单来说 <code>__str__()</code> 返回的是给用户看的描述性字符串，<code>__repr__()</code>返回的是给其他调用函数使用的字符串.</li></ul><h2 id="属性描述符-property"><a href="#属性描述符-property" class="headerlink" title="属性描述符 @property"></a>属性描述符 @property</h2><p>规范属性的赋值取值操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError()</span><br><span class="line">        self._score = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    s = Student()</span><br><span class="line">    s.score = <span class="number">101</span>  <span class="comment"># ValueError</span></span><br></pre></td></tr></table></figure><p>把一个 getter 方法变成属性加上<code>@property</code>即可，<code>@property</code>会创建另一个装饰器 <code>@score.setter</code>，负责把一个 setter 方法变成属性赋值，在这个方法中规范属性的操作。</p><p>如果某个属性只定义了 getter ，而且下划线开头<code>(_attr)</code>，意味着只读属性，直接赋值<code>(attr=1)</code>会抛出异常，非要给<code>_attr</code>赋值也不是不行，只是不符合规范，建议别这么搞。</p><p>属性查找顺序，<strong>类的实例 &gt; 类 &gt; 父类</strong>。</p><h2 id="抽象基类-Abstract-Base-Class"><a href="#抽象基类-Abstract-Base-Class" class="headerlink" title="抽象基类 Abstract Base Class"></a>抽象基类 Abstract Base Class</h2><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html</a></p></blockquote><p>父类定义抽象方法 <code>@abstractmethod</code>，子类须实现。</p><h2 id="可变对象-vs-不可变对象"><a href="#可变对象-vs-不可变对象" class="headerlink" title="可变对象 vs 不可变对象"></a>可变对象 vs 不可变对象</h2><p>python 变量中保存的是对象的引用，python 中一切传递都是传引用，无论赋值还是函数调用，不存在传值。</p><ul><li><p>不可变对象：更改变量所指向的对象值会开辟新的内存空间保存；</p></li><li><p>可变对象：可以直接修改内存中变量所指向的对象的值。</p><p><img src="https://i.loli.net/2020/08/02/Fvk4UIGZq8lsXaO.png" alt="可变对象与不可变对象"></p></li><li><p>关于 list</p><ul><li><p><code>list_a += []</code>  相当于 <code>extends()</code></p></li><li><p><code>list_a = list_a + []</code> 相当于 new 一个 list 对象并拷贝值</p></li></ul></li><li><p>关于比较</p><p>​    <code>==</code> 比较内容</p><p>​    <code>is</code> 比较地址</p></li><li><p>深拷贝 （deep copy） vs. 浅拷贝 (shallow copy)</p><ul><li>深拷贝：拷贝对象的内容，实现：<code>copy.deepcopy()</code>、…</li><li>浅拷贝：拷贝引用，实现：<code>copy.copy()</code>、<code>=</code>、列表切片、…</li></ul></li><li><p>函数默认参数</p><ul><li><p><strong>默认参数一定设置成不可变对象</strong>，此处有坑，印象深刻.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(mylist=[])</span>:</span></span><br><span class="line">    mylist.append(<span class="string">"a"</span>)</span><br><span class="line">    print(mylist)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        foo()</span><br><span class="line">        </span><br><span class="line">OUT:</span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><p>其实这么写 IDE 已经提示了，奈何对于 IDE 的警告就是视而不见…</p><p><img src="https://i.loli.net/2020/08/02/r8tUPXevgfIV5Cz.png" alt="image-20200802141554993"></p><p>正确写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(mylist=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mylist <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        mylist = []</span><br><span class="line">    mylist.append(<span class="string">"a"</span>)</span><br><span class="line">    print(mylist)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="0x04-程序健壮性"><a href="#0x04-程序健壮性" class="headerlink" title="0x04 程序健壮性"></a>0x04 程序健壮性</h1><h2 id="运行性能"><a href="#运行性能" class="headerlink" title="运行性能"></a>运行性能</h2><p><code>dis</code>模块可以生成一段 python 代码的字节码。</p><p>通过字节码，可以排查一段 python 代码到底干了啥，在性能调优上很有帮助。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">f'args:<span class="subst">&#123;args&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'kwargs:<span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f(<span class="string">'a'</span>, <span class="string">'b'</span>, others=<span class="string">'others'</span>)</span><br><span class="line">    print(dis.dis(f))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="keyword">print</span>)</span><br><span class="line">            <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'args:'</span>)</span><br><span class="line">            <span class="number">4</span> LOAD_FAST                <span class="number">0</span> (args)</span><br><span class="line">            <span class="number">6</span> FORMAT_VALUE             <span class="number">0</span></span><br><span class="line">            <span class="number">8</span> BUILD_STRING             <span class="number">2</span></span><br><span class="line">           <span class="number">10</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">           <span class="number">12</span> POP_TOP</span><br><span class="line"><span class="number">5</span>          <span class="number">14</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="keyword">print</span>)</span><br><span class="line">           <span class="number">16</span> LOAD_CONST               <span class="number">2</span> (<span class="string">'kwargs:'</span>)</span><br><span class="line">           <span class="number">18</span> LOAD_FAST                <span class="number">1</span> (kwargs)</span><br><span class="line">           <span class="number">20</span> FORMAT_VALUE             <span class="number">0</span></span><br><span class="line">           <span class="number">22</span> BUILD_STRING             <span class="number">2</span></span><br><span class="line">           <span class="number">24</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">           <span class="number">26</span> POP_TOP</span><br><span class="line">           <span class="number">28</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">           <span class="number">30</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><ul><li><code>with</code>语句</li><li>实现上下文管理协议</li><li>实现了<code>__enter__()</code>和<code>__exit__()</code>方法</li></ul><p>相关参考：</p><ul><li><p>实现一个支持<code>with</code>语句的对象：</p><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=%E4%B8%8A%E4%B8%8B%E6%96%87">https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=%E4%B8%8A%E4%B8%8B%E6%96%87</a></p></blockquote></li><li><p><code>@contextmanager</code> :</p><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p22_define_context_managers_the_easy_way.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p22_define_context_managers_the_easy_way.html</a></p></blockquote></li></ul><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>python 中垃圾回收以<strong>引用计数</strong>为主，<strong>标记-清除</strong>、<strong>分代回收</strong>为辅。</p><ul><li><p>引用计数：每个对象内部维护一个 counter，在被引用时 +1，解引用 -1，counter =0 时对象被回收。这种策略简单高效，而且具备实时性，但无法解决循环引用的问题，eg.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyObject</span><span class="params">(ctypes.Structure)</span>:</span></span><br><span class="line">    _fields_ = [(<span class="string">"refcnt"</span>, ctypes.c_long)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_memory_info</span><span class="params">(name)</span>:</span></span><br><span class="line">    pid = os.getpid()</span><br><span class="line">    p = psutil.Process(pid)</span><br><span class="line"></span><br><span class="line">    info = p.memory_full_info()</span><br><span class="line">    memory = info.uss / (<span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">f"<span class="subst">&#123;name&#125;</span> used <span class="subst">&#123;memory&#125;</span> MB"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print_memory_info(<span class="string">"foo start"</span>)</span><br><span class="line">    _len = <span class="number">900000</span></span><br><span class="line">    list_a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(_len)]</span><br><span class="line">    list_b = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(_len)]</span><br><span class="line">    list_a.append(list_b)</span><br><span class="line">    list_b.append(list_a)</span><br><span class="line">    addr_a = id(list_a)</span><br><span class="line">    addr_b = id(list_b)</span><br><span class="line">    <span class="keyword">del</span> list_a, list_b</span><br><span class="line">    print_memory_info(<span class="string">"foo end"</span>)</span><br><span class="line">    <span class="keyword">return</span> addr_a, addr_b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    addr_a, addr_b = foo()</span><br><span class="line">    <span class="comment"># ret = gc.collect(0)</span></span><br><span class="line">    <span class="comment"># print(f"&#123;ret&#125; object(s) collected.")</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f"list_a ref cnt = <span class="subst">&#123;PyObject.from_address(id(addr_a)).refcnt&#125;</span>"</span>)</span><br><span class="line">    print(<span class="string">f"list_b ref cnt = <span class="subst">&#123;PyObject.from_address(id(addr_b)).refcnt&#125;</span>"</span>)</span><br><span class="line">    print_memory_info(<span class="string">"main end"</span>)</span><br></pre></td></tr></table></figure><p><code>foo()</code>方法返回值为两个 list 的地址，这两个 list 已经用 <code>del</code>显式删除，但两个 list 互相持有对方的引用，导致在<code>foo()</code>方法结束后并没有回收掉这两个 list ，引用计数还是 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo start used <span class="number">12.33203125</span> MB</span><br><span class="line">foo end used <span class="number">47.0390625</span> MB</span><br><span class="line">list_a ref cnt = <span class="number">1</span></span><br><span class="line">list_b ref cnt = <span class="number">1</span></span><br><span class="line">main end used <span class="number">47.0390625</span> MB</span><br></pre></td></tr></table></figure></li><li><p>标记-清除(mark-sweep)：基于对象可达性分析的垃圾回收算法。</p><ul><li>标记阶段：从根节点出发，根节点（简单理解成调用栈或者全局变量）可达的对象标记为可达状态；</li><li>回收阶段：没有被标记的对象回收掉。</li></ul><p>这种策略扫描整个堆内存，进行 GC 时需要阻塞正常运行的程序，GC 结束后恢复，性能开销比较大，同时会导致很多小的内存碎片。</p></li><li><p>分代回收</p><ul><li>标记清除这种算法，需要扫描整个堆内存，而且被回收掉的对象越少，性能损耗越大；</li><li>分代回收大致意思：按照存活时间不同将对象划分成 0、1、2三代，新生对象在 0 代，经过一次 GC 后，如果存活移动到 1 代，2 代为存活时间最长的对象。对于每一代，维护两个变量，counter 和 threshold，counter 表示<strong>当前代分配内存的对象数量 - 上一次回收掉的对象数量</strong>，当 counter 的值超过预定的 threshold 时触发当前代的一次 GC。</li></ul></li><li><p><code>gc.collect()</code></p><ul><li>参数可以指定 GC 的代（0 / 1 / 2），不传参数默认进行一次完整的 GC ，返回值为不可达对象数量。</li></ul></li></ul><h1 id="0x05-编码风格与设计模式"><a href="#0x05-编码风格与设计模式" class="headerlink" title="0x05 编码风格与设计模式"></a>0x05 编码风格与设计模式</h1><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><ol><li><code>__func__</code>、<code>__var__</code> python 保留，别这么写；</li><li><code>__func()</code>、<code>__var</code> 类的 private 方法、属性，无特殊需求不用；</li><li><code>_func()</code> 、<code>_var</code>属于 protected ，被继承或者导入时不会包含；</li></ol><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/#id15">https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/#id15</a></p><h2 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h2><p>一个类只有一个实例存在。需要的时候直接用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> id(cls) <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[id(cls)] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[id(cls)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clz</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="0x06-运行环境"><a href="#0x06-运行环境" class="headerlink" title="0x06 运行环境"></a>0x06 运行环境</h1><h2 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h2><p>虚拟环境，各项目运行环境隔离开。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myvenv</span><br><span class="line"><span class="comment"># enter venv</span></span><br><span class="line">soure ./myvenv/bin/active</span><br><span class="line"><span class="comment"># exit venv</span></span><br><span class="line">deactive</span><br></pre></td></tr></table></figure><h2 id="pip-加速安装"><a href="#pip-加速安装" class="headerlink" title="pip 加速安装"></a>pip 加速安装</h2><p>国内镜像站：豆瓣 / 清华</p><p>windows配置：<code>C:\User\\{User}\pip\pip.ini</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url='https://pypi.tuna.tsinghua.edu.cn/simple'</span><br></pre></td></tr></table></figure><h1 id="0x07-ipdb-调试器"><a href="#0x07-ipdb-调试器" class="headerlink" title="0x07 ipdb 调试器"></a>0x07 ipdb 调试器</h1><blockquote><p>在使用 Django 框架时，遇到一个奇怪的问题… </p><p>从 PyCharm 启动调试器运行项目，断点打在某个 app 的方法里，执行期间并不会断下来；而断点打在其他文件里，比如 <code>settings.py</code>、<code>urls.py</code>就可以正常断下。</p><p>这个问题折磨了好久也没整明白是咋回事，算了，不跟他刚，我换个调试器…</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install ipdb</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>集成到源码里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ipdb</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">ipdb.set_trace() <span class="comment"># 添加断点</span></span><br></pre></td></tr></table></figure><p>执行到第三行会停下来进入 ipdb 调试。这种方式比较麻烦在，每次添加断点需要修改代码。</p></li><li><p><code>python -m ipdb mycode.py</code>  这样从命令行启动好些</p></li><li><p>设置断点 <code>b [文件名:]行号 | 方法</code>，这样设置的断点在<code>restart</code>后依然保留，忽略断点<code>disable</code>/ 重新启用<code>enable</code>，清除断点 <code>clear</code></p></li><li><p>下一行 <code>n</code></p></li><li><p>step into <code>s</code></p></li><li><p>执行到下个断点 <code>c</code></p></li><li><p>执行到指定行 <code>j</code></p></li><li><p>执行到返回 <code>r</code></p></li><li><p>查看源码 <code>l</code> ，<code>ll</code>输出长一点</p></li></ol><p>   以上是平时自己比较常用到的，还有些临时断点<code>tbreak</code>、条件断点<code>condition</code>之类的不太常用，需要的时候问 Google。</p><p>   官方文档 ：<a href="https://docs.python.org/3.5/library/pdb.html">https://docs.python.org/3.5/library/pdb.html</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest">Python3 Cookbook</a></p></li><li><p><a href="https://www.cnblogs.com/liaohuiqiang/p/9668303.html">python中的引用传递，可变对象，不可变对象，list注意点</a></p></li><li><p><a href="http://www.ityouknow.com/python/2020/01/06/python-gc-111.html">第111天：Python 垃圾回收机制</a></p></li><li><p><a href="https://dreamgoing.github.io/Python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html">Python垃圾回收</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文知识点比较杂且并不深入，多为自己比较模糊的 python 基础特性。&lt;/p&gt;
&lt;p&gt;感谢组内@RedFree 大佬的无私分享，以下参考组内分享内容和 b 站视频  &lt;a href=&quot;https://www.bilibili.com/video/BV1FJ411J7CR&quot;&gt;惊呆！Python 竟然还有这样的黑魔法！&lt;/a&gt; 整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;0x01-基本数据类型&quot;&gt;&lt;a href=&quot;#0x01-基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本数据类型&quot;&gt;&lt;/a&gt;0x01 基本数据类型&lt;/h1&gt;&lt;h2 id=&quot;推导式&quot;&gt;&lt;a href=&quot;#推导式&quot; class=&quot;headerlink&quot; title=&quot;推导式&quot;&gt;&lt;/a&gt;推导式&lt;/h2&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[表达式 for 迭代变量 in 可迭代对象 if 条件 / for 循环]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带判断条件的&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;]: myList = [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;]: myList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;]: [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;折腾字典的&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;]: myDict = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;v1&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;V2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;]: ret = &amp;#123;key:value &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value,key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; myDict.items()&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;]: ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;]: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;v1&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;V2&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://misscoconut.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>gRPC 笔记</title>
    <link href="https://misscoconut.github.io/2020/07/27/gRPC%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://misscoconut.github.io/2020/07/27/gRPC%20%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-26T17:34:33.000Z</published>
    <updated>2020-08-01T06:50:43.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近一段时间周会上频繁听到 gRPC 这个框架，学习一下相关知识：</p><ol><li>RPC 相关背景知识</li><li>gRPC 框架使用</li><li>Protocol Buffers 协议相关</li><li>分析一次完整的 gRPC 服务调用请求</li></ol></blockquote><h2 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h2><h3 id="1-1-RPC-是啥"><a href="#1-1-RPC-是啥" class="headerlink" title="1.1 RPC 是啥"></a>1.1 RPC 是啥</h3><p>RPC (Remote Procedure Calls) 远程过程调用。</p><p>本地调用远程方法，比较直接的做法是服务端暴露出 Restful 接口，客户端发 http request 去调用，RPC 的过程简单来看可以理解成是对这个操作进行的一层封装。</p><p>RPC 调用过程如下图所示，RPC 对服务调用方屏蔽掉网络请求、消息编码、数据传输等工作，提供一个代理对象给调用方，使服务调用方调用远程方法时如同调用本地方法一样简洁。</p><a id="more"></a><img src="https://i.loli.net/2020/07/24/Sgo2AtmDBPkjd9w.png"  />                                <h3 id="1-2-RPC-框架"><a href="#1-2-RPC-框架" class="headerlink" title="1.2 RPC  框架"></a>1.2 RPC  框架</h3><p>RPC 抽象来看可以归纳为两方面问题：<strong>1.调用方与提供方协议约定问题；</strong> <strong>2.网络传输问题</strong>，解决这两块基本问题后，还得需要工程落地，解决服务发现、负载均衡、限流熔断等等问题，于是有了 RPC 框架的出现。</p><p><img src="https://i.loli.net/2020/07/26/6CiPu97Apb5rFYa.png" alt="image-20200726003032433"></p><p>​    </p><p>上图是一个典型的 RPC 框架的基本架构，主要分成四块：</p><ol><li>入口层：动态代理机制在服务提供方包装好服务的接口，暴露给调用方；对调用方提供代理对象，屏蔽其感知远程过程调用；</li><li>集群层：解决分布式场景下的服务发现、节点负载均衡、容错、路由管理等等问题；</li><li>协议层:  约定调用方与提供方数据包的格式，提供反序列化、解压缩等功能支持；</li><li>网络传输: 提供 TCP 长链接传输、HTTP 通信等功能。</li></ol><h4 id="服务治理（SOA）"><a href="#服务治理（SOA）" class="headerlink" title="服务治理（SOA）"></a>服务治理（SOA）</h4><p>服务治理解决什么问题？</p><img src="https://i.loli.net/2020/07/26/kzJE97djvcqiFLf.png" alt="image-20200726140244088" style="zoom: 67%;" /><ul><li>服务发现机制</li></ul><p><img src="https://i.loli.net/2020/07/26/eLYGVsoPBcyH6mu.png" alt="image-20200726135501383"></p><p>类似 DNS 的机制，服务提供方向注册中心进行注册，调用方订阅服注册中心；注册中心拿到当前提供方服务的地址后推送给调用方。</p><h3 id="1-3-RPC-vs-HTTP-Service"><a href="#1-3-RPC-vs-HTTP-Service" class="headerlink" title="1.3 RPC vs HTTP Service"></a>1.3 RPC vs HTTP Service</h3><p>相比于 HTTP 服务，RPC 具有以下优势：</p><ul><li>网络传输方面：基于 TCP 长链接，省去了 HTTP 连接建立过程中的性能损耗，提高传输效率；</li><li>传输消息方面：传输的消息序列化成二进制对象，数据包体积减小，节省带宽；</li><li>开发者友好：RPC 牺牲了消息的可读性来提高易用性，对于调用方开发者只需要调用本地接口即可调用远程方法；</li><li>面向服务的封装：成熟的 RPC 框架封装了服务发现、负载均衡、熔断降级等等面向服务的高级特性，单纯使用 HTTP 服务调用则少了这些特性。</li></ul><p>同时，也存在一些劣势：</p><ul><li>数据包可读性差，提高团队成员学习成本；</li><li>交互性单一：只能调用方主动调用服务端方法，在需要服务端下发通知等场景下不适用。</li></ul><p>如何选择 RPC 或 HTTP 服务？</p><ol><li>公司内部给其他业务提供接口时，优先考虑 RPC 服务，使用方为公司外部的服务，优先考虑 HTTP 服务；</li><li>对于消耗特定资源的（例如 GPU/CPU/大内存资源），有特殊依赖的（比如运行环境需要依赖外部的 ffmpeg），集中实现效率比较高的（比如某个业务集中到几台机器，可以使用大内存缓存等）,选 RPC；</li><li>一些经常变化的业务逻辑，依赖很广泛，又需要实现可以收敛且能随时更新，选择 RPC。</li></ol><h3 id="1-4-HTTP-2-协议"><a href="#1-4-HTTP-2-协议" class="headerlink" title="1.4 HTTP/2 协议"></a>1.4 HTTP/2 协议</h3><p>gRPC 框架的网络传输部分依赖 HTTP/2 协议，为理解 gRPC，先来了解一下 HTTP/2 协议。</p><h4 id="1-4-1-HTTP-发展历史"><a href="#1-4-1-HTTP-发展历史" class="headerlink" title="1.4.1 HTTP 发展历史"></a>1.4.1 HTTP 发展历史</h4><ul><li>HTTP/1.0：链接无法复用，每次请求都需要经过三次握手，重新建立连接，增加延迟；</li><li>HTTP/1.1：Headers 中增加<code>keep-alive</code>标识，可以复用一部分连接，但域名分片等情况下，仍需要建立多次连接，耗费资源； </li><li>HTTP/2.0：为提高传输性能，HTTP/2.0 在客户端和服务端之间只建立一个链接(connection)。</li></ul><h4 id="1-4-2-HTTP-2-0-新特性"><a href="#1-4-2-HTTP-2-0-新特性" class="headerlink" title="1.4.2 HTTP/2.0 新特性"></a>1.4.2 HTTP/2.0 新特性</h4><p>HTTP/2.0 协议 2015 年发布，完整的升级涉及到的内容较多，这里只挑部分特性了解一下。</p><ul><li><p>基本概念</p><ul><li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符；</li><li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成；</li><li>帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等</li></ul></li><li><p>二进制传输消息</p><p>HTTP/1.x 的请求包和响应包，都是由起始行、Headers 和 Body 组成，各部分之间以文本换行符分隔，而 <strong>HTTP/2 将请求和响应数据分割为更小的帧，并且采用二进制编码</strong>。</p></li><li><p>多路复用</p><p>针对同一域名只建立一个链接(Connection)，该信道可承载任意数量的双向数据流(Stream)，每个数据流中以消息(Message)的形式读写，一个消息的最小组成单位为帧(Frame)，数据流内的消息可以乱序发送，根据帧头部的流标识可以重排。</p><img src="https://i.loli.net/2020/07/26/VW1jJ5bqsrgudia.jpg" alt="img" style="zoom:67%;" /></li></ul><ul><li><p>Header 压缩</p><p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p><p>为了减少这块的资源消耗并提升性能， HTTP/2对这些首部采取了压缩策略：</p><ul><li>HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；</li><li>首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新;</li><li>每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值。</li></ul><p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p><img src="https://pic1.zhimg.com/80/v2-058742b31290c7251fc9b7cb49b72aa6_720w.jpg" alt="img" style="zoom: 80%;" /></li></ul><h2 id="二、gRPC"><a href="#二、gRPC" class="headerlink" title="二、gRPC"></a>二、gRPC</h2><p>gRPC 是 Google 开源的一套基于 HTTP/2 标准设计的 RPC 框架，由于 HTTP/2 协议带来诸如双向流、流控、头部压缩、单 TCP 连接上的多路复用请求等特性使得 gRPC 在移动设备上表现更出色，更加省点省空间，在实际的移动端业务中 gRPC 框架为主流选择。</p><h3 id="2-1-gRPC-特性"><a href="#2-1-gRPC-特性" class="headerlink" title="2.1 gRPC 特性"></a>2.1 gRPC 特性</h3><ul><li><p>优势</p><ul><li><p>支持多种语言；</p></li><li><p>基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub；</p></li><li><p>网络通信依赖 Netty 实现的 HTTP/2 协议封装，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；</p></li><li><p>序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。</p></li></ul></li><li><p>缺点</p><ul><li>服务治理相关能力缺失，负载均衡和服务发现等功能需要开发者扩展实现。</li></ul></li></ul><h3 id="2-2-gRPC-核心概念"><a href="#2-2-gRPC-核心概念" class="headerlink" title="2.2 gRPC 核心概念"></a>2.2 gRPC 核心概念</h3><h4 id="2-2-1-服务调用模式"><a href="#2-2-1-服务调用模式" class="headerlink" title="2.2.1 服务调用模式"></a>2.2.1 服务调用模式</h4><p>gRPC 底层通信依赖于 HTTP/2 协议，由于 HTTP/2 协议是一个支持双向流的协议，因此 gRPC 在 API 的设计上也才用了流的方式。gRPC 中允许定义四种服务调用模式：</p><ol><li><p>Unary 调用模式：响应-请求模式，客户端发送请求给服务端，服务端应答；</p><p><code>rpc SayHello(HelloRequest) returns (HelloResponse){ }</code></p></li><li><p>Server Streaming 模式：客户端发送一个请求给服务端，并获取一个数据流用来读取一系列消息。客户端从返回的数据流里一直读取直到没有更多消息为止；</p><p><code>rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){ }</code></p></li><li><p>Client Streaming 模式：客户端用提供的一个数据流写入并发送一系列消息给服务端。一旦客户端完成消息写入，就等待服务端读取这些消息并返回应答；</p><p><code>rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) { }</code></p></li><li><p>双向 Streaming 模式：通信双方之间建立相互独立的读写数据流来发送一系列消息，双方都可发送多次消息，且允许乱序发送消息。</p><p><code>rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){ }</code></p></li></ol><h4 id="2-2-2-Protobuf"><a href="#2-2-2-Protobuf" class="headerlink" title="2.2.2 Protobuf"></a>2.2.2 Protobuf</h4><p>gRPC 默认使用 Protocol Buffers (Protobuf) 作为接口定义语言，来描述服务接口和消息结构。Protocol Buffers 是一个可独立使用的序列化框架，它并不与 gRPC 框架绑定，任何需要支持多语言的 RPC 框架都可以选择使用 Protocol Buffers 作为序列化框架。</p><p>Protocol Buffers 的使用主要包括</p><ul><li>IDL 文件定义（*.proto）, 包含数据结构定义，以及可选的服务接口定义（gRPC）；</li><li>各种语言的代码生成（含数据结构定义、以及序列化和反序列化接口）；</li><li>使用 Protocol Buffers 的 API 进行序列化和反序列化。</li></ul><h5 id="支持的数据结构"><a href="#支持的数据结构" class="headerlink" title="支持的数据结构"></a>支持的数据结构</h5><ul><li>支持主流语言常用数据结构，考虑到跨语言特性，对于特定语言的数据结构并不提供支持，如 Java 的 Exception 对象。</li></ul><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><table><thead><tr><th align="center">protobuf</th><th align="center">C++</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">double</td><td align="center">double</td><td align="center">double</td></tr><tr><td align="center">float</td><td align="center">float</td><td align="center">float</td></tr><tr><td align="center">int32</td><td align="center">int32</td><td align="center">int</td></tr><tr><td align="center">int64</td><td align="center">int64</td><td align="center">long</td></tr><tr><td align="center">string</td><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">bytes</td><td align="center">string</td><td align="center">ByteString</td></tr><tr><td align="center">bool</td><td align="center">bool</td><td align="center">boolean</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><center>表1. Protobuf 基本数据类型对照表</center><h5 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h5><ul><li>数组类型</li></ul><p>利用 Protobuf 提供的 <code>repeted</code>关键字，标识该字段重复任意次数，相当于数组的功能。</p><ul><li>枚举类型</li></ul><p><code>enum</code>关键字定义枚举类型，eg.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">QueryInfo</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> queryID = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Types</span></span>&#123;</span><br><span class="line">USER = <span class="number">0</span>;</span><br><span class="line">GROUP=<span class="number">1</span>;</span><br><span class="line">OTHERS=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Types type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map 类型</li></ul><p>在 Protobuf 3 中新增了对 Map 类型的支持，eg.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;key_type, value_type&gt; map_field = N;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ValueType</span></span>&#123;...&#125;</span><br><span class="line">map&lt;<span class="built_in">string</span>, ValueType&gt; typeMap = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Map 的键值可以是基本数据类型，也可以是自定义的 message ，但不支持<code>repeated</code>关键字。</p><ul><li>泛型</li></ul><p>对于类型无法确定的情况，类似于 Java 中的泛型，Protobuf 提供了 <code>google.protobuf.Any</code>这个类型，表示存放任意类型的数据。根据我司开发规范，这种类型被强制不允许使用。</p><h5 id="IDL-文件定义"><a href="#IDL-文件定义" class="headerlink" title="IDL 文件定义"></a>IDL 文件定义</h5><p>基本的 Protobuf 语法定义的数据结构如下所示:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;<span class="comment">// protobuf 版本</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"io.grpc.examples.helloworld"</span>;<span class="comment">// 生成代码的存放路径</span></span><br><span class="line"><span class="keyword">package</span> helloworld;<span class="comment">// 包名</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;<span class="comment">// message 关键字定义数据结构</span></span><br><span class="line"><span class="built_in">string</span> name = <span class="number">1</span>;<span class="comment">// 字段名称 = Tag，Tag 作为字段的标识符在每个 message 中唯一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>详细语法参考：<a href="https://developers.google.com/protocol-buffers/docs/proto3">Language Guide (proto3)</a></p><h5 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h5><p>.proto 文件中定义的每个 service ，protoc 会生成一个名为<code>{service_name}Grpc</code>的类，这个类存放在 <code>java_packag</code>指定的包结构下。</p><p>下载 protoc 后，可以通过命令行调用 protoc 来生成桩代码，或者使用官方推荐的更优雅的方式，配置 maven 或者 gradle 在项目编译时自动生成桩代码。maven 配置见下文。</p><h3 id="2-3-hello-gRPC"><a href="#2-3-hello-gRPC" class="headerlink" title="2.3 hello gRPC"></a>2.3 hello gRPC</h3><p>以下参考 gRPC 官方文档的 demo 学习 gRPC 基本用法，实现服务端(Java)与客户端(Java)之间四种服务调用模式通信。</p><h4 id="2-3-1-服务端"><a href="#2-3-1-服务端" class="headerlink" title="2.3.1 服务端"></a>2.3.1 服务端</h4><h5 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h5><ol><li><p>下载 protoc 编译器，配置环境变量，安装一个支持 proto 语法高亮的 IDEA 插件；</p></li><li><p>新建 maven 项目，配置 pom.xml 添加对 Protobuf 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-protobuf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-stub<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;protobuf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立源码目录 </p><p>手动建立目录<code>src/main/java</code>保存服务实现源码，<code>src/main/proto</code>保存.proto 文件，注意这里要把 /proto 这个目录设置成源文件目录(Mark Directory as -&gt; Sources Root)。</p></li></ol><h5 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h5><p>在/proto 目录下，新建<code>test.proto</code>文件，定义四个 RPC 方法，分别对应四种服务类型，以及<code>request</code>和<code>response</code>的类型：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;    <span class="comment">//指定语法为 proto3 格式</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"me.misscoconut.rpc"</span>;  <span class="comment">// 生成 Java 类文件所在包名</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"GetProfile"</span>;  <span class="comment">// 生成的 Java 类名</span></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;  <span class="comment">// 针对每个 message 和 ervice 都单独生成一个类；设置为 false,会以内部类的形式生成</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">GetProfileService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByID(ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;                  <span class="comment">// Simple RPC</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernamesByID(ProfileRequest) <span class="keyword">returns</span> (stream ProfileResponse)</span>;          <span class="comment">// Server Streaming</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByIDs(stream ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;          <span class="comment">// Client Streaming</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernamesByIDs(stream ProfileRequest) <span class="keyword">returns</span> (stream ProfileResponse)</span>;  <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileRequest</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponse</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userName = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponseList</span></span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ProfileResponse response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成-Java-桩代码"><a href="#生成-Java-桩代码" class="headerlink" title="生成 Java 桩代码"></a>生成 Java 桩代码</h5><p>在 pom.xml 配置 protobuf 插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.3.0:exe:$&#123;os.detected.classifier&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                       io.grpc:protoc-gen-grpc-java:1.4.0:exe:$&#123;os.detected.classifier&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步一下，maven compile 项目。/target/generated-sources 下生成的 java 桩代码，复制到 /src/main/java 下。</p><h5 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h5><p>服务接口实现类继承自<code>GetProfileServiceImplBase</code>，重写基类里边的各服务方法。</p><ul><li>服务端创建:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 指定 grpc 服务器端口，绑定服务接口实现，启动 grpc server</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">23333</span>;</span><br><span class="line">        grpcServer = ServerBuilder.forPort(port)</span><br><span class="line">                .addService(<span class="keyword">new</span> GetProfileServiceImpl())</span><br><span class="line">                .build()</span><br><span class="line">                .start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"GetProfileRpcServer.start,listing on port "</span> + port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 hook，jvm 退出前关闭 tcp 连接</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Shutting down GetProfileRpcServer since JVM is shutting down."</span>);</span><br><span class="line">                GetProfileRpcServer.<span class="keyword">this</span>.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>服务接口实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProfileServiceImpl</span> <span class="keyword">extends</span> <span class="title">GetProfileServiceGrpc</span>.<span class="title">GetProfileServiceImplBase</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Simple RPC</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsernameByID</span><span class="params">(ProfileRequest request, StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           responseObserver.onNext(</span><br><span class="line">                   ProfileResponse.newBuilder().setUserName(<span class="string">"simple rpc response."</span>).build());</span><br><span class="line">           responseObserver.onCompleted();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Server Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsernamesByID</span><span class="params">(ProfileRequest request, StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           List&lt;ProfileResponse&gt; responseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 1."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 2."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 3."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 3."</span>).build());</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (ProfileResponse resp : responseList) &#123;</span><br><span class="line">               responseObserver.onNext(resp);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           responseObserver.onCompleted();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Client Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> StreamObserver&lt;ProfileRequest&gt; <span class="title">getUsernameByIDs</span><span class="params">(StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           List&lt;String&gt; reqFromClient = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> StreamObserver&lt;ProfileRequest&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileRequest profileRequest)</span> </span>&#123;</span><br><span class="line">                   reqFromClient.add(profileRequest.getUserID());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                   System.out.println(<span class="string">"GetProfileServiceImpl.onError"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">for</span> (String req : reqFromClient) &#123;</span><br><span class="line">                       System.out.println(<span class="string">"Client streaming request "</span> + req);</span><br><span class="line">                   &#125;</span><br><span class="line">                   responseObserver.onNext(ProfileResponse.newBuilder().setUserName(<span class="string">"Client streaming response."</span>).build());</span><br><span class="line">                   responseObserver.onCompleted();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> StreamObserver&lt;ProfileRequest&gt; <span class="title">getUsernamesByIDs</span><span class="params">(StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> StreamObserver&lt;ProfileRequest&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileRequest profileRequest)</span> </span>&#123;</span><br><span class="line">                   responseObserver.onNext(ProfileResponse.newBuilder().setUserName(<span class="string">"Bidirectional Streaming Server response."</span>).build());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                   System.out.println(<span class="string">"GetProfileServiceImpl.onError"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   responseObserver.onCompleted();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-服务端创建流程"><a href="#2-3-2-服务端创建流程" class="headerlink" title="2.3.2 服务端创建流程"></a>2.3.2 服务端创建流程</h4><p>服务端创建过程主要涉及<code>ServerBuilder</code>、<code>NettyServerProvider</code>、<code>GetProfileServiceImpl</code>三个对象。</p><p>大致流程：</p><ol><li><p>创建 Netty HTTP/2 服务端，监听指定的 Socket 地址；</p></li><li><p>绑定 proto 文件中定义的服务接口实现类，<strong>将需要调用的服务端接口实现类注册到内部的注册中心</strong>；</p><blockquote><p>由于注册中心机制，gRPC 服务接口实现类的调用不需要通过动态代理和反射机制，而是通过 proto 工具生成代码，在服务端启动时，将服务接口实现类实例注册到 gRPC 内部的服务注册中心上。请求消息接入之后，可以根据服务名和方法名，直接调用启动时注册的服务实例，而不需要通过反射的方式进行调用，性能更高。</p></blockquote></li><li><p>创建 gRPC Server，用于 RPC 消息的统一调度和处理。</p></li></ol><h4 id="2-3-3-客户端"><a href="#2-3-3-客户端" class="headerlink" title="2.3.3 客户端"></a>2.3.3 客户端</h4><h5 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h5><ol><li>指定 ip:port 创建 <code>ManagedChannelImpl</code>;</li><li>创建客户端 Stub；</li><li>使用客户端 Stub 发起 RPC 请求获得响应。</li></ol><h5 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ManagedChannel channel = ManagedChannelBuilder.forTarget(<span class="string">"localhost:23333"</span>)</span><br><span class="line">            .usePlaintext(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    GetProfileServiceGrpc.GetProfileServiceBlockingStub blockingStub = GetProfileServiceGrpc.newBlockingStub(channel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unary</span></span><br><span class="line">    GetProfileServiceGrpc.GetProfileServiceStub stub = GetProfileServiceGrpc.newStub(channel);</span><br><span class="line">    ProfileResponse response = blockingStub</span><br><span class="line">            .getUsernameByID(ProfileRequest.newBuilder().setUserID(<span class="string">"cocotest"</span>).build());</span><br><span class="line"></span><br><span class="line">    System.out.println(response.getUserName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Client Streaming</span></span><br><span class="line">    Iterator&lt;ProfileResponse&gt; results =</span><br><span class="line">      blockingStub.getUsernamesByID(ProfileRequest.newBuilder().setUserID(<span class="string">"cocotest"</span>).build());</span><br><span class="line">    <span class="keyword">while</span> (results.hasNext()) &#123;</span><br><span class="line">        System.out.println(results.next().getUserName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Server Streaming</span></span><br><span class="line">    <span class="comment">// 1. response</span></span><br><span class="line">    StreamObserver&lt;ProfileResponse&gt; responseStreamObserver = <span class="keyword">new</span> StreamObserver&lt;ProfileResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileResponse profileResponse)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Server Streaming] Client received :"</span> + profileResponse.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            System.out.println(throwable.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Server Streaming] Client.onCompleted()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 2. request</span></span><br><span class="line">    StreamObserver&lt;ProfileRequest&gt; usernameByIDs = stub.getUsernameByIDs(responseStreamObserver);</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc1111"</span>).build());</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc2222"</span>).build());</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc3333"</span>).build());</span><br><span class="line">    usernameByIDs.onCompleted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (</span><br><span class="line">            InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">    StreamObserver&lt;ProfileResponse&gt; responseStreamObserver2 = <span class="keyword">new</span> StreamObserver&lt;ProfileResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileResponse value)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Bidirectional] Client received :"</span> + value.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            System.out.println(t.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Bidirectional] Client.onCompleted()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StreamObserver&lt;ProfileRequest&gt; usernamesByIDs = stub.getUsernamesByIDs(responseStreamObserver2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        usernamesByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"c:"</span> + i).build());</span><br><span class="line">        System.out.println(<span class="string">"c:"</span> + i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    usernamesByIDs.onCompleted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    channel.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-客户端调用流程"><a href="#2-3-4-客户端调用流程" class="headerlink" title="2.3.4 客户端调用流程"></a>2.3.4 客户端调用流程</h4><blockquote><ol><li><p>客户端 Stub(<code>GetProfileServiceBlockingStub</code>) 调用 <code>getUsernameByID(request)</code>，发起 RPC 调用；</p></li><li><p>通过 <code>DnsNameResolver</code>进行域名解析，获取服务端的地址信息（列表），随后使用默认的 <code>LoadBalancer</code>策略，选择一个具体的 gRPC 服务端实例；</p></li><li><p>如果与路由选中的服务端之间没有可用的连接，则创建 <code>NettyClientTransport</code> 和 <code>NettyClientHandler</code>，发起 HTTP/2 连接；对请求消息使用 Protobuf 做序列化，通过 HTTP/2 Stream 发送给 gRPC 服务端；</p></li><li><p>接收到服务端响应之后，使用 Protobuf 做反序列化；</p></li><li><p>回调 <code>GrpcFuture</code> 的 <code>set(Response)</code> 方法，唤醒阻塞的客户端调用线程，获取 RPC 响应。</p></li></ol></blockquote><h2 id="三、抓包分析"><a href="#三、抓包分析" class="headerlink" title="三、抓包分析"></a>三、抓包分析</h2><p>目标：使用 Wireshark 抓包分析一次完成的 gRPC  请求调用流程。</p><p>首先稍微改一下 proto 文件，response message 多加两个字段：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">GetProfileService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByID(ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;                 </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileRequest</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponse</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userName = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> userEmail = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">string</span> userPhone = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponseList</span></span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ProfileResponse response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译桩代码，修改服务端&amp;客户端代码。</p><h3 id="Wireshark-抓包"><a href="#Wireshark-抓包" class="headerlink" title="Wireshark 抓包"></a>Wireshark 抓包</h3><p>Wireshark 监听本地回环端口，启动server端，启动client端，结束server进程。Wireshark 里按端口过滤下，整个通信过程如下。</p><p><img src="https://i.loli.net/2020/08/01/iJ6hzyRqBSP3M2n.png" alt="image-20200801111955025"></p><p>Wireshark 这里按照 TCP 协议解析了，前边说到 gRPC 走的是基于 TCP 的 HTTP/2 协议，手动设置一下 Wireshark 。</p><blockquote><p>首选项 -&gt; Protocals -&gt; Http2 -&gt; 设置端口 23333</p></blockquote><p>之后完整通信流程解析出来:</p><p><img src="https://i.loli.net/2020/08/01/cQN14ORbYgjhwim.png" alt="image-20200801122729801"></p><p>一次完整的 gRPC 调用大致流程：</p><blockquote><p>建立 TCP 连接 -&gt; 建立 HTTP2 连接 -&gt; 协商配置 -&gt; 发送 Headers （调用的方法）-&gt; 发送参数 -&gt; 返回结果 -&gt; 断开连接</p></blockquote><h3 id="Protobuf-格式解析"><a href="#Protobuf-格式解析" class="headerlink" title="Protobuf  格式解析"></a>Protobuf  格式解析</h3><p><img src="https://i.loli.net/2020/08/01/BHxwKdhlb31PXfF.png" alt="image-20200801130350991"></p><p>这个 demo 比较简单，没有用 TLS，设置了明文传输，比较好理解 protobuf 序列化之后的样子。<br>一个 message 序列化之后按照 <code>[tag][value]</code> 格式来保存，其中<code>tag</code>由字段序号和类型计算出来，而<code>value</code>的值根据不同类型进行编码压缩。</p><p>更具体些：</p><p>tag 的值有个计算公式：<code>tag = (key &lt;&lt; 3) | wire_type</code></p><p>key 是 proto 文件中定义的序号，<code>wire_type</code> 有下边这些类型：</p><p><img src="https://i.loli.net/2020/08/01/FcK5PykALYIl21Q.png" alt="image-20200801140132237"></p><p>比如这个 message 中第一个字段：</p><p><img src="https://i.loli.net/2020/08/01/pMIAFLTO6aYUrGq.png" alt="image-20200801140301767"></p><p><code>key =1</code>,<code>wire_type=2</code>,计算出来 tag = (1 &lt;&lt; 3)|2 = 0a</p><p>string 类型的按照固定编码格式，length + content = 08 + 6c6f6c696c6f6c69 </p><p>按照这样的思路，可以反推出 message 各个字段是啥。</p><h2 id="四、踩坑记录"><a href="#四、踩坑记录" class="headerlink" title="四、踩坑记录"></a>四、踩坑记录</h2><h3 id="4-1-找不到类io-grpc-BindableService"><a href="#4-1-找不到类io-grpc-BindableService" class="headerlink" title="4.1  找不到类io.grpc.BindableService"></a>4.1  找不到类<code>io.grpc.BindableService</code></h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: io/grpc/BindableService</span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">DeclaredMethods0(Native Method)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">private</span><span class="constructor">GetDeclaredMethods(Class.<span class="params">java</span>:2701)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">private</span><span class="constructor">GetMethodRecursive(Class.<span class="params">java</span>:3048)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method0(Class.<span class="params">java</span>:3018)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method(Class.<span class="params">java</span>:1784)</span></span><br><span class="line">at sun.launcher.<span class="module-access"><span class="module"><span class="identifier">LauncherHelper</span>.</span></span>validate<span class="constructor">MainClass(LauncherHelper.<span class="params">java</span>:544)</span></span><br><span class="line">at sun.launcher.<span class="module-access"><span class="module"><span class="identifier">LauncherHelper</span>.</span></span>check<span class="constructor">AndLoadMain(LauncherHelper.<span class="params">java</span>:526)</span></span><br><span class="line">Caused by: java.lang.ClassNotFoundException: io.grpc.BindableService</span><br><span class="line">at java.net.<span class="module-access"><span class="module"><span class="identifier">URLClassLoader</span>.</span></span>find<span class="constructor">Class(URLClassLoader.<span class="params">java</span>:381)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>load<span class="constructor">Class(ClassLoader.<span class="params">java</span>:424)</span></span><br><span class="line">at sun.misc.<span class="module-access"><span class="module"><span class="identifier">Launcher$AppClassLoader</span>.</span></span>load<span class="constructor">Class(Launcher.<span class="params">java</span>:349)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>load<span class="constructor">Class(ClassLoader.<span class="params">java</span>:357)</span></span><br><span class="line"><span class="operator">... </span><span class="number">7</span> more</span><br><span class="line">Error: A JNI error has occurred, please check your installation <span class="keyword">and</span> <span class="keyword">try</span> again</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：</p><p>jdk 版本和 jre 版本不一致。</p><p>解决：</p><p>检查<code>java -version</code>和 <code>javac -version</code> 版本是否一致，一看还真不一样。</p><p><img src="https://i.loli.net/2020/07/28/XdrxgoUaVhJSI9f.png" alt="image-20200728075420917"></p><p>重新安装一致的版本。</p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://jingwei.link/2018/10/02/grpc-wireshark-analysis.html">抓包gRPC的细节及分析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/161577635">gRPC系列(三) 如何借助HTTP2实现传输</a></p></li><li><p><a href="https://juejin.im/post/6844904007811465229">深入理解Protobuf3协议原理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近一段时间周会上频繁听到 gRPC 这个框架，学习一下相关知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RPC 相关背景知识&lt;/li&gt;
&lt;li&gt;gRPC 框架使用&lt;/li&gt;
&lt;li&gt;Protocol Buffers 协议相关&lt;/li&gt;
&lt;li&gt;分析一次完整的 gRPC 服务调用请求&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、背景知识&quot;&gt;&lt;a href=&quot;#一、背景知识&quot; class=&quot;headerlink&quot; title=&quot;一、背景知识&quot;&gt;&lt;/a&gt;一、背景知识&lt;/h2&gt;&lt;h3 id=&quot;1-1-RPC-是啥&quot;&gt;&lt;a href=&quot;#1-1-RPC-是啥&quot; class=&quot;headerlink&quot; title=&quot;1.1 RPC 是啥&quot;&gt;&lt;/a&gt;1.1 RPC 是啥&lt;/h3&gt;&lt;p&gt;RPC (Remote Procedure Calls) 远程过程调用。&lt;/p&gt;
&lt;p&gt;本地调用远程方法，比较直接的做法是服务端暴露出 Restful 接口，客户端发 http request 去调用，RPC 的过程简单来看可以理解成是对这个操作进行的一层封装。&lt;/p&gt;
&lt;p&gt;RPC 调用过程如下图所示，RPC 对服务调用方屏蔽掉网络请求、消息编码、数据传输等工作，提供一个代理对象给调用方，使服务调用方调用远程方法时如同调用本地方法一样简洁。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="gRPC" scheme="https://misscoconut.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://misscoconut.github.io/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>压力管理</title>
    <link href="https://misscoconut.github.io/2020/07/14/%E5%8E%8B%E5%8A%9B/"/>
    <id>https://misscoconut.github.io/2020/07/14/%E5%8E%8B%E5%8A%9B/</id>
    <published>2020-07-13T17:51:33.000Z</published>
    <updated>2020-07-26T17:56:04.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h1><p>近两个月，巨大的压力和内心的焦虑给自己的工作生活与身心健康上带来了许多困扰。</p><p>面对的压力源既有工作上的，更多的则是来自家庭方面，而且这两方面的压力源，在可预见的未来很长一段时间里并不会消失。</p><p>当下我试图为自己找到一套科学的思维框架去直面压力与焦虑，希望今后面对相同情境时可以省去大量无用的思考，将精力聚焦在更有意义的事情上。</p><a id="more"></a><h1 id="二、为什么会存在焦虑？"><a href="#二、为什么会存在焦虑？" class="headerlink" title="二、为什么会存在焦虑？"></a>二、为什么会存在焦虑？</h1><p>如果从进化论角度来理解焦虑的话，那么可以说焦虑是人类生存的必备技能。</p><p>远古时期人类依靠打猎生存，祖先们遇到危险时产生紧张焦虑情绪，导致肾上腺素上升，进而心跳加速，注意力集中，反应敏锐，于是才能在恶劣的自然条件中存活下来。反之，那些不会没有产生紧张焦虑情绪的人类早已被淘汰，如今的我们都是在遇到危险情况时会感到紧张焦虑的祖先们的后代。</p><p>焦虑并不是一种毫无可取之处的情绪，适当的压力和焦虑，可以有效的警醒我们面对即将发生的事情。</p><h1 id="三、焦虑的本质是什么？"><a href="#三、焦虑的本质是什么？" class="headerlink" title="三、焦虑的本质是什么？"></a>三、焦虑的本质是什么？</h1><ul><li><p>存在不确定性</p></li><li><p>无法控制事物发展</p></li><li><p>关心在意某件事</p></li></ul><h1 id="四、如何与焦虑共处"><a href="#四、如何与焦虑共处" class="headerlink" title="四、如何与焦虑共处?"></a>四、如何与焦虑共处?</h1><p>既然焦虑是一种非常正常的应激反应，那么试图去消除焦虑似乎并不容易。</p><p>但我们可以从焦虑的本质入手，想办法和焦虑共处，保证我们的工作生活可以正常进行下去。</p><ol><li><p>存在不确定性 –&gt; <strong>评估威胁程度</strong></p><p> 即便不确定的事情，也会存在确定的一面。</p><p> 做好最好的打算和最坏的打算，无论事情朝着哪个方向发展，自己心里有谱，焦虑感会减轻许多。</p></li><li><p>关心在意某件事 –&gt; <strong>正念冥想</strong></p><p> 在陷入极度焦虑的沼泽时使用，将注意力从嘈杂的事物中拯救出来，专注于当下的呼吸上，和身体建立连接，使自己平静下来。</p><p> 生活中的10%取决于发生的事情，而剩下 90%取决于我们对待事物的反应。正念冥想更积极的意义在于当人平静下来后，才能更理智的思考该以怎样的反应去应对当前的事情。</p><p> 相关资源：潮汐 app、喜马拉雅 app 上的课程等等。</p></li><li><p>无法控制事物发展 –&gt; <strong>做正确的事</strong></p><p> 无法控制的事情，不必执着。做自己能控制的正确的事。</p><blockquote><p>When I do good,I feel good,When I do bad,I feed bad.</p></blockquote><p> 按时吃饭，按时睡觉，正常工作，积极锻炼。</p><p> 越是焦虑紧张的时候，越要做按部就班的正确的事情。熟悉的日常节奏会给自己很多安心的感觉。</p></li></ol><p>不管怎样，生活还要继续下去，可能是中国人骨子里的乐观精神吧，我始终愿意相信一切总会好起来的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、起因&quot;&gt;&lt;a href=&quot;#一、起因&quot; class=&quot;headerlink&quot; title=&quot;一、起因&quot;&gt;&lt;/a&gt;一、起因&lt;/h1&gt;&lt;p&gt;近两个月，巨大的压力和内心的焦虑给自己的工作生活与身心健康上带来了许多困扰。&lt;/p&gt;
&lt;p&gt;面对的压力源既有工作上的，更多的则是来自家庭方面，而且这两方面的压力源，在可预见的未来很长一段时间里并不会消失。&lt;/p&gt;
&lt;p&gt;当下我试图为自己找到一套科学的思维框架去直面压力与焦虑，希望今后面对相同情境时可以省去大量无用的思考，将精力聚焦在更有意义的事情上。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="个人成长" scheme="https://misscoconut.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>把事情做完，然后亮出去</title>
    <link href="https://misscoconut.github.io/2020/07/12/post/"/>
    <id>https://misscoconut.github.io/2020/07/12/post/</id>
    <published>2020-07-12T07:55:05.000Z</published>
    <updated>2020-07-26T17:56:54.408Z</updated>
    
    <content type="html"><![CDATA[<p>博客这个事情，从学生时期就想弄，一拖再拖直到现在，已经步入职场三年了。</p><p>把做的事情亮出去，对我来说是一件蛮有压力的事情。逃避了这么久，并不想再继续安逸下去了。趁现在还算年轻，是时候借着这种压力 push 自己一把。</p><p>这个周末博客准备完毕，给自己定个规矩吧，今后无论工作还是生活，在做的事情无论进展多糟糕，都要把它<strong>做完</strong>，并且要<strong>亮出去</strong>，要去不断逼迫自己下次做的更好，强制审视自己并做出改变。</p><p>希望自己可以做到专业技术类文章<strong>月更至少一篇</strong>，其他领域知识技能类文章<strong>双月一篇</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客这个事情，从学生时期就想弄，一拖再拖直到现在，已经步入职场三年了。&lt;/p&gt;
&lt;p&gt;把做的事情亮出去，对我来说是一件蛮有压力的事情。逃避了这么久，并不想再继续安逸下去了。趁现在还算年轻，是时候借着这种压力 push 自己一把。&lt;/p&gt;
&lt;p&gt;这个周末博客准备完毕，给自己定
      
    
    </summary>
    
    
    
      <category term="生活记录" scheme="https://misscoconut.github.io/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
      <category term="个人成长" scheme="https://misscoconut.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
</feed>
