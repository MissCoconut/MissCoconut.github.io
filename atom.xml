<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>椰子小姐的笔记本</title>
  
  <subtitle>知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://misscoconut.github.io/"/>
  <updated>2020-08-01T12:52:10.169Z</updated>
  <id>https://misscoconut.github.io/</id>
  
  <author>
    <name>MissCoconut</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 笔记</title>
    <link href="https://misscoconut.github.io/2020/08/01/Python%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://misscoconut.github.io/2020/08/01/Python%20%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-01T12:18:26.000Z</published>
    <updated>2020-08-01T12:52:10.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文知识点比较杂，多为平时不太熟悉的 python 特性。</p><p>参考组内@RedFree 大佬的分享 和 b 站视频  <a href="https://www.bilibili.com/video/BV1FJ411J7CR">惊呆！Python 竟然还有这样的黑魔法！</a> 整理。</p></blockquote><h1 id="0x01-基本数据类型"><a href="#0x01-基本数据类型" class="headerlink" title="0x01 基本数据类型"></a>0x01 基本数据类型</h1><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 for 迭代变量 in 可迭代对象 if 条件 / for 循环]</span><br></pre></td></tr></table></figure><ul><li><p>带判断条件的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: myList = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: myList</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>折腾字典的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: myDict = &#123;<span class="string">'key1'</span>:<span class="string">'v1'</span>,<span class="string">'key2'</span>:<span class="string">'V2'</span>&#125;</span><br><span class="line">In [<span class="number">37</span>]: ret = &#123;key:value <span class="keyword">for</span> value,key <span class="keyword">in</span> myDict.items()&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: ret</span><br><span class="line">Out[<span class="number">38</span>]: &#123;<span class="string">'v1'</span>: <span class="string">'key1'</span>, <span class="string">'V2'</span>: <span class="string">'key2'</span>&#125;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>嵌套循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: myList = [str(i) + j <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'ABCDE'</span>]</span><br><span class="line">In [<span class="number">41</span>]: print(myList)</span><br><span class="line">[<span class="string">'1A'</span>, <span class="string">'1B'</span>, <span class="string">'1C'</span>, <span class="string">'1D'</span>, <span class="string">'1E'</span>, <span class="string">'2A'</span>, <span class="string">'2B'</span>, <span class="string">'2C'</span>, <span class="string">'2D'</span>, <span class="string">'2E'</span>, <span class="string">'3A'</span>, <span class="string">'3B'</span>, <span class="string">'3C'</span>, <span class="string">'3D'</span>, <span class="string">'3E'</span>, <span class="string">'4A'</span>, <span class="string">'4B'</span>, <span class="string">'4C'</span>, <span class="string">'4D'</span>, <span class="string">'4E'</span>, <span class="string">'5A'</span>, <span class="string">'5B'</span>, <span class="string">'5C'</span>, <span class="string">'5D'</span>, <span class="string">'5E'</span>]</span><br></pre></td></tr></table></figure><p>同理推导式可应用于字典、集合、元组（注意需要用<code>tuple()</code>来定义，直接用<code>()</code>会被当成一个生成器）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: myList = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: myList</span><br><span class="line">Out[<span class="number">43</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x04C0D8F0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: myList = tuple(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line">In [<span class="number">49</span>]: print(myList)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>)</span><br></pre></td></tr></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li><p><code>%s</code> / <code>%5.3f</code> C 语言里边那种形式</p></li><li><p><code>str.format(*args,**kwargs)</code> 可以指定匿名参数/命名参数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">62</span>]: print(<span class="string">'&#123;1&#125; and &#123;0&#125; and &#123;other&#125;'</span>.format(<span class="string">'spam'</span>,<span class="string">'eggs'</span>,other=<span class="string">'aaaaa'</span>))</span><br><span class="line">eggs <span class="keyword">and</span> spam <span class="keyword">and</span> aaaaa</span><br></pre></td></tr></table></figure><ul><li><p><code>f-string</code> python 3.6引入，贼好使</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: fname = <span class="string">'coconut'</span></span><br><span class="line">In [<span class="number">64</span>]: lname = <span class="string">'miss'</span></span><br><span class="line">In [<span class="number">65</span>]: print(<span class="string">f'Hello,<span class="subst">&#123;lname&#125;</span> <span class="subst">&#123;fname&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">Hello,miss coconut</span><br></pre></td></tr></table></figure></li><li><p>f-string 还可以用在类中</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,fname,lname)</span>:</span></span><br><span class="line">        self.fname = fname</span><br><span class="line">        self.lname = lname</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'hello,<span class="subst">&#123;self.fname&#125;</span> <span class="subst">&#123;self.lname&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'hello,<span class="subst">&#123;self.fname&#125;</span> <span class="subst">&#123;self.lname&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">'coconut'</span>,<span class="string">'miss'</span>)</span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;person&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="collections-加强版的数据类型"><a href="#collections-加强版的数据类型" class="headerlink" title="collections 加强版的数据类型"></a>collections 加强版的数据类型</h2><ul><li><p><code>namedtuple</code> 带命名的元组</p></li><li><p><code>deque</code>双向队列</p></li><li><p><code>Counter</code>计数器</p></li><li><p><code>timeit</code> 统计函数执行时间，python自带的</p></li><li><p><a href="https://docs.python.org/zh-cn/3/library/collections.html">https://docs.python.org/zh-cn/3/library/collections.html</a><br>遇到个啥新的数据类型，不要急于造轮子，先看看 python 标准库里边有现成的没。    </p></li></ul><h1 id="0x02-函数"><a href="#0x02-函数" class="headerlink" title="0x02 函数"></a>0x02 函数</h1><h2 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h2><ul><li><code>*args</code>和<code>**kwargs</code><br><code>*args</code> 其他参数<br><code>**kwargs</code> 关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">f'args:<span class="subst">&#123;args&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'kwargs:<span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="string">'a'</span>, <span class="string">'b'</span>, others=<span class="string">'others'</span>)</span><br><span class="line">-----OUTPUT:</span><br><span class="line">args:(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">kwargs:&#123;<span class="string">'others'</span>: <span class="string">'others'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>只是个表达式，一般适用于很简单的函数逻辑（一个表达式），不用给函数起个名了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="keyword">lambda</span> x:x+<span class="number">1</span></span><br><span class="line">print(k(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>参数是函数，返回值还是函数<br>eg. <code>map()</code> <code>filter()</code><br><code>functools</code> 这个包可以参考</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>语法糖<code>@decorate</code></p><p>装饰器的参数是被装饰函数。<br>不用入侵函数内部。<br>强调函数定义态而不是运行态。理解成 hook 一个函数。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ul><li>包含 <code>yield</code> 关键字的函数</li><li><strong>协程</strong>   #todo 挖坑待填</li><li>下一个内容<code>next(generator)</code></li><li>输出全部内容 <code>list(generator)</code></li></ul><h1 id="0x03-面向对象编程"><a href="#0x03-面向对象编程" class="headerlink" title="0x03 面向对象编程"></a>0x03 面向对象编程</h1><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>类似于其他语言的接口</p><p>eg.</p><ul><li><code>__call__()</code>允许类的实例成为可调用的对象</li><li><code>__iter__()</code> 定义被迭代时的行为</li><li><code>__getitem__()</code> 使用<code>[key]</code>调用时的行为</li><li><code>__str__()</code> vs. <code>__repr__()</code> ？<br>  简单来说 <code>__str__()</code> 返回的是给用户看的描述性字符串，<code>__repr__()</code>返回的是给其他调用函数使用的字符串.</li></ul><h2 id="抽象基类-Abstract-Base-Class"><a href="#抽象基类-Abstract-Base-Class" class="headerlink" title="抽象基类 Abstract Base Class"></a>抽象基类 Abstract Base Class</h2><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p12_define_interface_or_abstract_base_class.html</a></p></blockquote><p>父类定义抽象方法 <code>@abstractmethod</code>，子类必须实现。可以用于对象的类型检查。</p><h2 id="属性描述符-property"><a href="#属性描述符-property" class="headerlink" title="属性描述符 property"></a>属性描述符 property</h2><p>规范属性的赋值和获取</p><p>类的<code>__get__()</code>和<code>__set__()</code>方法</p><p>属性查找顺序，<strong>类的实例 &gt; 类 &gt; 父类</strong>。</p><h1 id="0x04-程序健壮性"><a href="#0x04-程序健壮性" class="headerlink" title="0x04 程序健壮性"></a>0x04 程序健壮性</h1><h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><p><code>except</code>里边又遇到了一个 exception，怎么处理这种套娃情况？</p><h2 id="运行性能"><a href="#运行性能" class="headerlink" title="运行性能"></a>运行性能</h2><p>python代码运行前会被编译成字节码，交给python虚拟机执行。<br>dis模块可以生成一段python代码的字节码。</p><p>通过字节码，可以排查一段python代码到底干了啥，在性能调优上很有帮助。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">f'args:<span class="subst">&#123;args&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'kwargs:<span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f(<span class="string">'a'</span>, <span class="string">'b'</span>, others=<span class="string">'others'</span>)</span><br><span class="line"></span><br><span class="line">    print(dis.dis(f))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="keyword">print</span>)</span><br><span class="line">            <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'args:'</span>)</span><br><span class="line">            <span class="number">4</span> LOAD_FAST                <span class="number">0</span> (args)</span><br><span class="line">            <span class="number">6</span> FORMAT_VALUE             <span class="number">0</span></span><br><span class="line">            <span class="number">8</span> BUILD_STRING             <span class="number">2</span></span><br><span class="line">           <span class="number">10</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">           <span class="number">12</span> POP_TOP</span><br><span class="line"><span class="number">5</span>          <span class="number">14</span> LOAD_GLOBAL              <span class="number">0</span> (<span class="keyword">print</span>)</span><br><span class="line">           <span class="number">16</span> LOAD_CONST               <span class="number">2</span> (<span class="string">'kwargs:'</span>)</span><br><span class="line">           <span class="number">18</span> LOAD_FAST                <span class="number">1</span> (kwargs)</span><br><span class="line">           <span class="number">20</span> FORMAT_VALUE             <span class="number">0</span></span><br><span class="line">           <span class="number">22</span> BUILD_STRING             <span class="number">2</span></span><br><span class="line">           <span class="number">24</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">           <span class="number">26</span> POP_TOP</span><br><span class="line">           <span class="number">28</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">           <span class="number">30</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><ul><li><code>with</code>语句</li><li>实现上下文管理协议</li><li>实现了<code>__enter__()</code>和<code>__exit__()</code>方法</li></ul><p>相关参考：</p><ul><li><p>实现一个支持<code>with</code>语句的对象：</p><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=%E4%B8%8A%E4%B8%8B%E6%96%87">https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p03_make_objects_support_context_management_protocol.html?highlight=%E4%B8%8A%E4%B8%8B%E6%96%87</a></p></blockquote></li><li><p><code>@contextmanager</code> :</p><blockquote><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p22_define_context_managers_the_easy_way.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p22_define_context_managers_the_easy_way.html</a></p></blockquote></li></ul><h1 id="0x05-代码风格与设计模式"><a href="#0x05-代码风格与设计模式" class="headerlink" title="0x05 代码风格与设计模式"></a>0x05 代码风格与设计模式</h1><h2 id="pylint"><a href="#pylint" class="headerlink" title="pylint"></a>pylint</h2><p>静态代码检查工具。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>一个类只有一个实例存在。<br>控制共享资源并行访问。</p><p>#todo eg.</p><h1 id="0x06-运行环境"><a href="#0x06-运行环境" class="headerlink" title="0x06 运行环境"></a>0x06 运行环境</h1><h2 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h2><p>虚拟环境，各项目运行环境隔离开。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myvenv</span><br><span class="line"><span class="comment"># enter venv</span></span><br><span class="line">soure ./myvenv/bin/active</span><br><span class="line"><span class="comment"># exit venv</span></span><br><span class="line">deactive</span><br></pre></td></tr></table></figure><h2 id="pip-加速安装"><a href="#pip-加速安装" class="headerlink" title="pip 加速安装"></a>pip 加速安装</h2><p>国内镜像站：豆瓣 / 清华</p><p>windows配置：<code>C:\User\\{User}\pip\pip.ini</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url='https://pypi.tuna.tsinghua.edu.cn/simple'</span><br></pre></td></tr></table></figure><h1 id="0x07-ipdb-调试器"><a href="#0x07-ipdb-调试器" class="headerlink" title="0x07 ipdb 调试器"></a>0x07 ipdb 调试器</h1><p>#todo</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文知识点比较杂，多为平时不太熟悉的 python 特性。&lt;/p&gt;
&lt;p&gt;参考组内@RedFree 大佬的分享 和 b 站视频  &lt;a href=&quot;https://www.bilibili.com/video/BV1FJ411J7CR&quot;&gt;惊呆！Python 竟然还有这样的黑魔法！&lt;/a&gt; 整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;0x01-基本数据类型&quot;&gt;&lt;a href=&quot;#0x01-基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本数据类型&quot;&gt;&lt;/a&gt;0x01 基本数据类型&lt;/h1&gt;&lt;h2 id=&quot;推导式&quot;&gt;&lt;a href=&quot;#推导式&quot; class=&quot;headerlink&quot; title=&quot;推导式&quot;&gt;&lt;/a&gt;推导式&lt;/h2&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[表达式 for 迭代变量 in 可迭代对象 if 条件 / for 循环]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带判断条件的&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;]: myList = [i &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;]: myList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;]: [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;折腾字典的&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;]: myDict = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;v1&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;V2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;]: ret = &amp;#123;key:value &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; value,key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; myDict.items()&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;]: ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;]: &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;v1&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;V2&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://misscoconut.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>gRPC 笔记</title>
    <link href="https://misscoconut.github.io/2020/07/27/gRPC%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://misscoconut.github.io/2020/07/27/gRPC%20%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-26T17:34:33.000Z</published>
    <updated>2020-08-01T06:50:43.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近一段时间周会上频繁听到 gRPC 这个框架，学习一下相关知识：</p><ol><li>RPC 相关背景知识</li><li>gRPC 框架使用</li><li>Protocol Buffers 协议相关</li><li>分析一次完整的 gRPC 服务调用请求</li></ol></blockquote><h2 id="一、背景知识"><a href="#一、背景知识" class="headerlink" title="一、背景知识"></a>一、背景知识</h2><h3 id="1-1-RPC-是啥"><a href="#1-1-RPC-是啥" class="headerlink" title="1.1 RPC 是啥"></a>1.1 RPC 是啥</h3><p>RPC (Remote Procedure Calls) 远程过程调用。</p><p>本地调用远程方法，比较直接的做法是服务端暴露出 Restful 接口，客户端发 http request 去调用，RPC 的过程简单来看可以理解成是对这个操作进行的一层封装。</p><p>RPC 调用过程如下图所示，RPC 对服务调用方屏蔽掉网络请求、消息编码、数据传输等工作，提供一个代理对象给调用方，使服务调用方调用远程方法时如同调用本地方法一样简洁。</p><a id="more"></a><img src="https://i.loli.net/2020/07/24/Sgo2AtmDBPkjd9w.png"  />                                <h3 id="1-2-RPC-框架"><a href="#1-2-RPC-框架" class="headerlink" title="1.2 RPC  框架"></a>1.2 RPC  框架</h3><p>RPC 抽象来看可以归纳为两方面问题：<strong>1.调用方与提供方协议约定问题；</strong> <strong>2.网络传输问题</strong>，解决这两块基本问题后，还得需要工程落地，解决服务发现、负载均衡、限流熔断等等问题，于是有了 RPC 框架的出现。</p><p><img src="https://i.loli.net/2020/07/26/6CiPu97Apb5rFYa.png" alt="image-20200726003032433"></p><p>​    </p><p>上图是一个典型的 RPC 框架的基本架构，主要分成四块：</p><ol><li>入口层：动态代理机制在服务提供方包装好服务的接口，暴露给调用方；对调用方提供代理对象，屏蔽其感知远程过程调用；</li><li>集群层：解决分布式场景下的服务发现、节点负载均衡、容错、路由管理等等问题；</li><li>协议层:  约定调用方与提供方数据包的格式，提供反序列化、解压缩等功能支持；</li><li>网络传输: 提供 TCP 长链接传输、HTTP 通信等功能。</li></ol><h4 id="服务治理（SOA）"><a href="#服务治理（SOA）" class="headerlink" title="服务治理（SOA）"></a>服务治理（SOA）</h4><p>服务治理解决什么问题？</p><img src="https://i.loli.net/2020/07/26/kzJE97djvcqiFLf.png" alt="image-20200726140244088" style="zoom: 67%;" /><ul><li>服务发现机制</li></ul><p><img src="https://i.loli.net/2020/07/26/eLYGVsoPBcyH6mu.png" alt="image-20200726135501383"></p><p>类似 DNS 的机制，服务提供方向注册中心进行注册，调用方订阅服注册中心；注册中心拿到当前提供方服务的地址后推送给调用方。</p><h3 id="1-3-RPC-vs-HTTP-Service"><a href="#1-3-RPC-vs-HTTP-Service" class="headerlink" title="1.3 RPC vs HTTP Service"></a>1.3 RPC vs HTTP Service</h3><p>相比于 HTTP 服务，RPC 具有以下优势：</p><ul><li>网络传输方面：基于 TCP 长链接，省去了 HTTP 连接建立过程中的性能损耗，提高传输效率；</li><li>传输消息方面：传输的消息序列化成二进制对象，数据包体积减小，节省带宽；</li><li>开发者友好：RPC 牺牲了消息的可读性来提高易用性，对于调用方开发者只需要调用本地接口即可调用远程方法；</li><li>面向服务的封装：成熟的 RPC 框架封装了服务发现、负载均衡、熔断降级等等面向服务的高级特性，单纯使用 HTTP 服务调用则少了这些特性。</li></ul><p>同时，也存在一些劣势：</p><ul><li>数据包可读性差，提高团队成员学习成本；</li><li>交互性单一：只能调用方主动调用服务端方法，在需要服务端下发通知等场景下不适用。</li></ul><p>如何选择 RPC 或 HTTP 服务？</p><ol><li>公司内部给其他业务提供接口时，优先考虑 RPC 服务，使用方为公司外部的服务，优先考虑 HTTP 服务；</li><li>对于消耗特定资源的（例如 GPU/CPU/大内存资源），有特殊依赖的（比如运行环境需要依赖外部的 ffmpeg），集中实现效率比较高的（比如某个业务集中到几台机器，可以使用大内存缓存等）,选 RPC；</li><li>一些经常变化的业务逻辑，依赖很广泛，又需要实现可以收敛且能随时更新，选择 RPC。</li></ol><h3 id="1-4-HTTP-2-协议"><a href="#1-4-HTTP-2-协议" class="headerlink" title="1.4 HTTP/2 协议"></a>1.4 HTTP/2 协议</h3><p>gRPC 框架的网络传输部分依赖 HTTP/2 协议，为理解 gRPC，先来了解一下 HTTP/2 协议。</p><h4 id="1-4-1-HTTP-发展历史"><a href="#1-4-1-HTTP-发展历史" class="headerlink" title="1.4.1 HTTP 发展历史"></a>1.4.1 HTTP 发展历史</h4><ul><li>HTTP/1.0：链接无法复用，每次请求都需要经过三次握手，重新建立连接，增加延迟；</li><li>HTTP/1.1：Headers 中增加<code>keep-alive</code>标识，可以复用一部分连接，但域名分片等情况下，仍需要建立多次连接，耗费资源； </li><li>HTTP/2.0：为提高传输性能，HTTP/2.0 在客户端和服务端之间只建立一个链接(connection)。</li></ul><h4 id="1-4-2-HTTP-2-0-新特性"><a href="#1-4-2-HTTP-2-0-新特性" class="headerlink" title="1.4.2 HTTP/2.0 新特性"></a>1.4.2 HTTP/2.0 新特性</h4><p>HTTP/2.0 协议 2015 年发布，完整的升级涉及到的内容较多，这里只挑部分特性了解一下。</p><ul><li><p>基本概念</p><ul><li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符；</li><li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成；</li><li>帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等</li></ul></li><li><p>二进制传输消息</p><p>HTTP/1.x 的请求包和响应包，都是由起始行、Headers 和 Body 组成，各部分之间以文本换行符分隔，而 <strong>HTTP/2 将请求和响应数据分割为更小的帧，并且采用二进制编码</strong>。</p></li><li><p>多路复用</p><p>针对同一域名只建立一个链接(Connection)，该信道可承载任意数量的双向数据流(Stream)，每个数据流中以消息(Message)的形式读写，一个消息的最小组成单位为帧(Frame)，数据流内的消息可以乱序发送，根据帧头部的流标识可以重排。</p><img src="https://i.loli.net/2020/07/26/VW1jJ5bqsrgudia.jpg" alt="img" style="zoom:67%;" /></li></ul><ul><li><p>Header 压缩</p><p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p><p>为了减少这块的资源消耗并提升性能， HTTP/2对这些首部采取了压缩策略：</p><ul><li>HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；</li><li>首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新;</li><li>每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值。</li></ul><p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p><img src="https://pic1.zhimg.com/80/v2-058742b31290c7251fc9b7cb49b72aa6_720w.jpg" alt="img" style="zoom: 80%;" /></li></ul><h2 id="二、gRPC"><a href="#二、gRPC" class="headerlink" title="二、gRPC"></a>二、gRPC</h2><p>gRPC 是 Google 开源的一套基于 HTTP/2 标准设计的 RPC 框架，由于 HTTP/2 协议带来诸如双向流、流控、头部压缩、单 TCP 连接上的多路复用请求等特性使得 gRPC 在移动设备上表现更出色，更加省点省空间，在实际的移动端业务中 gRPC 框架为主流选择。</p><h3 id="2-1-gRPC-特性"><a href="#2-1-gRPC-特性" class="headerlink" title="2.1 gRPC 特性"></a>2.1 gRPC 特性</h3><ul><li><p>优势</p><ul><li><p>支持多种语言；</p></li><li><p>基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub；</p></li><li><p>网络通信依赖 Netty 实现的 HTTP/2 协议封装，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；</p></li><li><p>序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。</p></li></ul></li><li><p>缺点</p><ul><li>服务治理相关能力缺失，负载均衡和服务发现等功能需要开发者扩展实现。</li></ul></li></ul><h3 id="2-2-gRPC-核心概念"><a href="#2-2-gRPC-核心概念" class="headerlink" title="2.2 gRPC 核心概念"></a>2.2 gRPC 核心概念</h3><h4 id="2-2-1-服务调用模式"><a href="#2-2-1-服务调用模式" class="headerlink" title="2.2.1 服务调用模式"></a>2.2.1 服务调用模式</h4><p>gRPC 底层通信依赖于 HTTP/2 协议，由于 HTTP/2 协议是一个支持双向流的协议，因此 gRPC 在 API 的设计上也才用了流的方式。gRPC 中允许定义四种服务调用模式：</p><ol><li><p>Unary 调用模式：响应-请求模式，客户端发送请求给服务端，服务端应答；</p><p><code>rpc SayHello(HelloRequest) returns (HelloResponse){ }</code></p></li><li><p>Server Streaming 模式：客户端发送一个请求给服务端，并获取一个数据流用来读取一系列消息。客户端从返回的数据流里一直读取直到没有更多消息为止；</p><p><code>rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){ }</code></p></li><li><p>Client Streaming 模式：客户端用提供的一个数据流写入并发送一系列消息给服务端。一旦客户端完成消息写入，就等待服务端读取这些消息并返回应答；</p><p><code>rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) { }</code></p></li><li><p>双向 Streaming 模式：通信双方之间建立相互独立的读写数据流来发送一系列消息，双方都可发送多次消息，且允许乱序发送消息。</p><p><code>rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){ }</code></p></li></ol><h4 id="2-2-2-Protobuf"><a href="#2-2-2-Protobuf" class="headerlink" title="2.2.2 Protobuf"></a>2.2.2 Protobuf</h4><p>gRPC 默认使用 Protocol Buffers (Protobuf) 作为接口定义语言，来描述服务接口和消息结构。Protocol Buffers 是一个可独立使用的序列化框架，它并不与 gRPC 框架绑定，任何需要支持多语言的 RPC 框架都可以选择使用 Protocol Buffers 作为序列化框架。</p><p>Protocol Buffers 的使用主要包括</p><ul><li>IDL 文件定义（*.proto）, 包含数据结构定义，以及可选的服务接口定义（gRPC）；</li><li>各种语言的代码生成（含数据结构定义、以及序列化和反序列化接口）；</li><li>使用 Protocol Buffers 的 API 进行序列化和反序列化。</li></ul><h5 id="支持的数据结构"><a href="#支持的数据结构" class="headerlink" title="支持的数据结构"></a>支持的数据结构</h5><ul><li>支持主流语言常用数据结构，考虑到跨语言特性，对于特定语言的数据结构并不提供支持，如 Java 的 Exception 对象。</li></ul><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><table><thead><tr><th align="center">protobuf</th><th align="center">C++</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">double</td><td align="center">double</td><td align="center">double</td></tr><tr><td align="center">float</td><td align="center">float</td><td align="center">float</td></tr><tr><td align="center">int32</td><td align="center">int32</td><td align="center">int</td></tr><tr><td align="center">int64</td><td align="center">int64</td><td align="center">long</td></tr><tr><td align="center">string</td><td align="center">string</td><td align="center">String</td></tr><tr><td align="center">bytes</td><td align="center">string</td><td align="center">ByteString</td></tr><tr><td align="center">bool</td><td align="center">bool</td><td align="center">boolean</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><center>表1. Protobuf 基本数据类型对照表</center><h5 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h5><ul><li>数组类型</li></ul><p>利用 Protobuf 提供的 <code>repeted</code>关键字，标识该字段重复任意次数，相当于数组的功能。</p><ul><li>枚举类型</li></ul><p><code>enum</code>关键字定义枚举类型，eg.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">QueryInfo</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> queryID = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Types</span></span>&#123;</span><br><span class="line">USER = <span class="number">0</span>;</span><br><span class="line">GROUP=<span class="number">1</span>;</span><br><span class="line">OTHERS=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Types type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map 类型</li></ul><p>在 Protobuf 3 中新增了对 Map 类型的支持，eg.</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map&lt;key_type, value_type&gt; map_field = N;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ValueType</span></span>&#123;...&#125;</span><br><span class="line">map&lt;<span class="built_in">string</span>, ValueType&gt; typeMap = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Map 的键值可以是基本数据类型，也可以是自定义的 message ，但不支持<code>repeated</code>关键字。</p><ul><li>泛型</li></ul><p>对于类型无法确定的情况，类似于 Java 中的泛型，Protobuf 提供了 <code>google.protobuf.Any</code>这个类型，表示存放任意类型的数据。根据我司开发规范，这种类型被强制不允许使用。</p><h5 id="IDL-文件定义"><a href="#IDL-文件定义" class="headerlink" title="IDL 文件定义"></a>IDL 文件定义</h5><p>基本的 Protobuf 语法定义的数据结构如下所示:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;<span class="comment">// protobuf 版本</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"io.grpc.examples.helloworld"</span>;<span class="comment">// 生成代码的存放路径</span></span><br><span class="line"><span class="keyword">package</span> helloworld;<span class="comment">// 包名</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;<span class="comment">// message 关键字定义数据结构</span></span><br><span class="line"><span class="built_in">string</span> name = <span class="number">1</span>;<span class="comment">// 字段名称 = Tag，Tag 作为字段的标识符在每个 message 中唯一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>详细语法参考：<a href="https://developers.google.com/protocol-buffers/docs/proto3">Language Guide (proto3)</a></p><h5 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h5><p>.proto 文件中定义的每个 service ，protoc 会生成一个名为<code>{service_name}Grpc</code>的类，这个类存放在 <code>java_packag</code>指定的包结构下。</p><p>下载 protoc 后，可以通过命令行调用 protoc 来生成桩代码，或者使用官方推荐的更优雅的方式，配置 maven 或者 gradle 在项目编译时自动生成桩代码。maven 配置见下文。</p><h3 id="2-3-hello-gRPC"><a href="#2-3-hello-gRPC" class="headerlink" title="2.3 hello gRPC"></a>2.3 hello gRPC</h3><p>以下参考 gRPC 官方文档的 demo 学习 gRPC 基本用法，实现服务端(Java)与客户端(Java)之间四种服务调用模式通信。</p><h4 id="2-3-1-服务端"><a href="#2-3-1-服务端" class="headerlink" title="2.3.1 服务端"></a>2.3.1 服务端</h4><h5 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h5><ol><li><p>下载 protoc 编译器，配置环境变量，安装一个支持 proto 语法高亮的 IDEA 插件；</p></li><li><p>新建 maven 项目，配置 pom.xml 添加对 Protobuf 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-protobuf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-stub<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;protobuf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立源码目录 </p><p>手动建立目录<code>src/main/java</code>保存服务实现源码，<code>src/main/proto</code>保存.proto 文件，注意这里要把 /proto 这个目录设置成源文件目录(Mark Directory as -&gt; Sources Root)。</p></li></ol><h5 id="服务定义"><a href="#服务定义" class="headerlink" title="服务定义"></a>服务定义</h5><p>在/proto 目录下，新建<code>test.proto</code>文件，定义四个 RPC 方法，分别对应四种服务类型，以及<code>request</code>和<code>response</code>的类型：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;    <span class="comment">//指定语法为 proto3 格式</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"me.misscoconut.rpc"</span>;  <span class="comment">// 生成 Java 类文件所在包名</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"GetProfile"</span>;  <span class="comment">// 生成的 Java 类名</span></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;  <span class="comment">// 针对每个 message 和 ervice 都单独生成一个类；设置为 false,会以内部类的形式生成</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">GetProfileService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByID(ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;                  <span class="comment">// Simple RPC</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernamesByID(ProfileRequest) <span class="keyword">returns</span> (stream ProfileResponse)</span>;          <span class="comment">// Server Streaming</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByIDs(stream ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;          <span class="comment">// Client Streaming</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernamesByIDs(stream ProfileRequest) <span class="keyword">returns</span> (stream ProfileResponse)</span>;  <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileRequest</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponse</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userName = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponseList</span></span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ProfileResponse response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成-Java-桩代码"><a href="#生成-Java-桩代码" class="headerlink" title="生成 Java 桩代码"></a>生成 Java 桩代码</h5><p>在 pom.xml 配置 protobuf 插件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.3.0:exe:$&#123;os.detected.classifier&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                       io.grpc:protoc-gen-grpc-java:1.4.0:exe:$&#123;os.detected.classifier&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步一下，maven compile 项目。/target/generated-sources 下生成的 java 桩代码，复制到 /src/main/java 下。</p><h5 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h5><p>服务接口实现类继承自<code>GetProfileServiceImplBase</code>，重写基类里边的各服务方法。</p><ul><li>服务端创建:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 指定 grpc 服务器端口，绑定服务接口实现，启动 grpc server</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">23333</span>;</span><br><span class="line">        grpcServer = ServerBuilder.forPort(port)</span><br><span class="line">                .addService(<span class="keyword">new</span> GetProfileServiceImpl())</span><br><span class="line">                .build()</span><br><span class="line">                .start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"GetProfileRpcServer.start,listing on port "</span> + port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 hook，jvm 退出前关闭 tcp 连接</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Shutting down GetProfileRpcServer since JVM is shutting down."</span>);</span><br><span class="line">                GetProfileRpcServer.<span class="keyword">this</span>.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>服务接口实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GetProfileServiceImpl</span> <span class="keyword">extends</span> <span class="title">GetProfileServiceGrpc</span>.<span class="title">GetProfileServiceImplBase</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Simple RPC</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsernameByID</span><span class="params">(ProfileRequest request, StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           responseObserver.onNext(</span><br><span class="line">                   ProfileResponse.newBuilder().setUserName(<span class="string">"simple rpc response."</span>).build());</span><br><span class="line">           responseObserver.onCompleted();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Server Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsernamesByID</span><span class="params">(ProfileRequest request, StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           List&lt;ProfileResponse&gt; responseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 1."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 2."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 3."</span>).build());</span><br><span class="line">           responseList.add(ProfileResponse.newBuilder().setUserName(<span class="string">"server streaming rpc response 3."</span>).build());</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (ProfileResponse resp : responseList) &#123;</span><br><span class="line">               responseObserver.onNext(resp);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           responseObserver.onCompleted();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Client Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> StreamObserver&lt;ProfileRequest&gt; <span class="title">getUsernameByIDs</span><span class="params">(StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           List&lt;String&gt; reqFromClient = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> StreamObserver&lt;ProfileRequest&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileRequest profileRequest)</span> </span>&#123;</span><br><span class="line">                   reqFromClient.add(profileRequest.getUserID());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                   System.out.println(<span class="string">"GetProfileServiceImpl.onError"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">for</span> (String req : reqFromClient) &#123;</span><br><span class="line">                       System.out.println(<span class="string">"Client streaming request "</span> + req);</span><br><span class="line">                   &#125;</span><br><span class="line">                   responseObserver.onNext(ProfileResponse.newBuilder().setUserName(<span class="string">"Client streaming response."</span>).build());</span><br><span class="line">                   responseObserver.onCompleted();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> StreamObserver&lt;ProfileRequest&gt; <span class="title">getUsernamesByIDs</span><span class="params">(StreamObserver&lt;ProfileResponse&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> StreamObserver&lt;ProfileRequest&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileRequest profileRequest)</span> </span>&#123;</span><br><span class="line">                   responseObserver.onNext(ProfileResponse.newBuilder().setUserName(<span class="string">"Bidirectional Streaming Server response."</span>).build());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                   System.out.println(<span class="string">"GetProfileServiceImpl.onError"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   responseObserver.onCompleted();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-服务端创建流程"><a href="#2-3-2-服务端创建流程" class="headerlink" title="2.3.2 服务端创建流程"></a>2.3.2 服务端创建流程</h4><p>服务端创建过程主要涉及<code>ServerBuilder</code>、<code>NettyServerProvider</code>、<code>GetProfileServiceImpl</code>三个对象。</p><p>大致流程：</p><ol><li><p>创建 Netty HTTP/2 服务端，监听指定的 Socket 地址；</p></li><li><p>绑定 proto 文件中定义的服务接口实现类，<strong>将需要调用的服务端接口实现类注册到内部的注册中心</strong>；</p><blockquote><p>由于注册中心机制，gRPC 服务接口实现类的调用不需要通过动态代理和反射机制，而是通过 proto 工具生成代码，在服务端启动时，将服务接口实现类实例注册到 gRPC 内部的服务注册中心上。请求消息接入之后，可以根据服务名和方法名，直接调用启动时注册的服务实例，而不需要通过反射的方式进行调用，性能更高。</p></blockquote></li><li><p>创建 gRPC Server，用于 RPC 消息的统一调度和处理。</p></li></ol><h4 id="2-3-3-客户端"><a href="#2-3-3-客户端" class="headerlink" title="2.3.3 客户端"></a>2.3.3 客户端</h4><h5 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h5><ol><li>指定 ip:port 创建 <code>ManagedChannelImpl</code>;</li><li>创建客户端 Stub；</li><li>使用客户端 Stub 发起 RPC 请求获得响应。</li></ol><h5 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ManagedChannel channel = ManagedChannelBuilder.forTarget(<span class="string">"localhost:23333"</span>)</span><br><span class="line">            .usePlaintext(<span class="keyword">true</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    GetProfileServiceGrpc.GetProfileServiceBlockingStub blockingStub = GetProfileServiceGrpc.newBlockingStub(channel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unary</span></span><br><span class="line">    GetProfileServiceGrpc.GetProfileServiceStub stub = GetProfileServiceGrpc.newStub(channel);</span><br><span class="line">    ProfileResponse response = blockingStub</span><br><span class="line">            .getUsernameByID(ProfileRequest.newBuilder().setUserID(<span class="string">"cocotest"</span>).build());</span><br><span class="line"></span><br><span class="line">    System.out.println(response.getUserName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Client Streaming</span></span><br><span class="line">    Iterator&lt;ProfileResponse&gt; results =</span><br><span class="line">      blockingStub.getUsernamesByID(ProfileRequest.newBuilder().setUserID(<span class="string">"cocotest"</span>).build());</span><br><span class="line">    <span class="keyword">while</span> (results.hasNext()) &#123;</span><br><span class="line">        System.out.println(results.next().getUserName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Server Streaming</span></span><br><span class="line">    <span class="comment">// 1. response</span></span><br><span class="line">    StreamObserver&lt;ProfileResponse&gt; responseStreamObserver = <span class="keyword">new</span> StreamObserver&lt;ProfileResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileResponse profileResponse)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Server Streaming] Client received :"</span> + profileResponse.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            System.out.println(throwable.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Server Streaming] Client.onCompleted()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 2. request</span></span><br><span class="line">    StreamObserver&lt;ProfileRequest&gt; usernameByIDs = stub.getUsernameByIDs(responseStreamObserver);</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc1111"</span>).build());</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc2222"</span>).build());</span><br><span class="line">    usernameByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"ccc3333"</span>).build());</span><br><span class="line">    usernameByIDs.onCompleted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (</span><br><span class="line">            InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bidirectional Streaming</span></span><br><span class="line">    StreamObserver&lt;ProfileResponse&gt; responseStreamObserver2 = <span class="keyword">new</span> StreamObserver&lt;ProfileResponse&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(ProfileResponse value)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Bidirectional] Client received :"</span> + value.getUserName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">            System.out.println(t.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"[Bidirectional] Client.onCompleted()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StreamObserver&lt;ProfileRequest&gt; usernamesByIDs = stub.getUsernamesByIDs(responseStreamObserver2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        usernamesByIDs.onNext(ProfileRequest.newBuilder().setUserID(<span class="string">"c:"</span> + i).build());</span><br><span class="line">        System.out.println(<span class="string">"c:"</span> + i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    usernamesByIDs.onCompleted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    channel.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-客户端调用流程"><a href="#2-3-4-客户端调用流程" class="headerlink" title="2.3.4 客户端调用流程"></a>2.3.4 客户端调用流程</h4><blockquote><ol><li><p>客户端 Stub(<code>GetProfileServiceBlockingStub</code>) 调用 <code>getUsernameByID(request)</code>，发起 RPC 调用；</p></li><li><p>通过 <code>DnsNameResolver</code>进行域名解析，获取服务端的地址信息（列表），随后使用默认的 <code>LoadBalancer</code>策略，选择一个具体的 gRPC 服务端实例；</p></li><li><p>如果与路由选中的服务端之间没有可用的连接，则创建 <code>NettyClientTransport</code> 和 <code>NettyClientHandler</code>，发起 HTTP/2 连接；对请求消息使用 Protobuf 做序列化，通过 HTTP/2 Stream 发送给 gRPC 服务端；</p></li><li><p>接收到服务端响应之后，使用 Protobuf 做反序列化；</p></li><li><p>回调 <code>GrpcFuture</code> 的 <code>set(Response)</code> 方法，唤醒阻塞的客户端调用线程，获取 RPC 响应。</p></li></ol></blockquote><h2 id="三、抓包分析"><a href="#三、抓包分析" class="headerlink" title="三、抓包分析"></a>三、抓包分析</h2><p>目标：使用 Wireshark 抓包分析一次完成的 gRPC  请求调用流程。</p><p>首先稍微改一下 proto 文件，response message 多加两个字段：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">GetProfileService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> getUsernameByID(ProfileRequest) <span class="keyword">returns</span> (ProfileResponse)</span>;                 </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileRequest</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userID = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponse</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> userName = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> userEmail = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">string</span> userPhone = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProfileResponseList</span></span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> ProfileResponse response = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译桩代码，修改服务端&amp;客户端代码。</p><h3 id="Wireshark-抓包"><a href="#Wireshark-抓包" class="headerlink" title="Wireshark 抓包"></a>Wireshark 抓包</h3><p>Wireshark 监听本地回环端口，启动server端，启动client端，结束server进程。Wireshark 里按端口过滤下，整个通信过程如下。</p><p><img src="https://i.loli.net/2020/08/01/iJ6hzyRqBSP3M2n.png" alt="image-20200801111955025"></p><p>Wireshark 这里按照 TCP 协议解析了，前边说到 gRPC 走的是基于 TCP 的 HTTP/2 协议，手动设置一下 Wireshark 。</p><blockquote><p>首选项 -&gt; Protocals -&gt; Http2 -&gt; 设置端口 23333</p></blockquote><p>之后完整通信流程解析出来:</p><p><img src="https://i.loli.net/2020/08/01/cQN14ORbYgjhwim.png" alt="image-20200801122729801"></p><p>一次完整的 gRPC 调用大致流程：</p><blockquote><p>建立 TCP 连接 -&gt; 建立 HTTP2 连接 -&gt; 协商配置 -&gt; 发送 Headers （调用的方法）-&gt; 发送参数 -&gt; 返回结果 -&gt; 断开连接</p></blockquote><h3 id="Protobuf-格式解析"><a href="#Protobuf-格式解析" class="headerlink" title="Protobuf  格式解析"></a>Protobuf  格式解析</h3><p><img src="https://i.loli.net/2020/08/01/BHxwKdhlb31PXfF.png" alt="image-20200801130350991"></p><p>这个 demo 比较简单，没有用 TLS，设置了明文传输，比较好理解 protobuf 序列化之后的样子。<br>一个 message 序列化之后按照 <code>[tag][value]</code> 格式来保存，其中<code>tag</code>由字段序号和类型计算出来，而<code>value</code>的值根据不同类型进行编码压缩。</p><p>更具体些：</p><p>tag 的值有个计算公式：<code>tag = (key &lt;&lt; 3) | wire_type</code></p><p>key 是 proto 文件中定义的序号，<code>wire_type</code> 有下边这些类型：</p><p><img src="https://i.loli.net/2020/08/01/FcK5PykALYIl21Q.png" alt="image-20200801140132237"></p><p>比如这个 message 中第一个字段：</p><p><img src="https://i.loli.net/2020/08/01/pMIAFLTO6aYUrGq.png" alt="image-20200801140301767"></p><p><code>key =1</code>,<code>wire_type=2</code>,计算出来 tag = (1 &lt;&lt; 3)|2 = 0a</p><p>string 类型的按照固定编码格式，length + content = 08 + 6c6f6c696c6f6c69 </p><p>按照这样的思路，可以反推出 message 各个字段是啥。</p><h2 id="四、踩坑记录"><a href="#四、踩坑记录" class="headerlink" title="四、踩坑记录"></a>四、踩坑记录</h2><h3 id="4-1-找不到类io-grpc-BindableService"><a href="#4-1-找不到类io-grpc-BindableService" class="headerlink" title="4.1  找不到类io.grpc.BindableService"></a>4.1  找不到类<code>io.grpc.BindableService</code></h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: io/grpc/BindableService</span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">DeclaredMethods0(Native Method)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">private</span><span class="constructor">GetDeclaredMethods(Class.<span class="params">java</span>:2701)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">private</span><span class="constructor">GetMethodRecursive(Class.<span class="params">java</span>:3048)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method0(Class.<span class="params">java</span>:3018)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>get<span class="constructor">Method(Class.<span class="params">java</span>:1784)</span></span><br><span class="line">at sun.launcher.<span class="module-access"><span class="module"><span class="identifier">LauncherHelper</span>.</span></span>validate<span class="constructor">MainClass(LauncherHelper.<span class="params">java</span>:544)</span></span><br><span class="line">at sun.launcher.<span class="module-access"><span class="module"><span class="identifier">LauncherHelper</span>.</span></span>check<span class="constructor">AndLoadMain(LauncherHelper.<span class="params">java</span>:526)</span></span><br><span class="line">Caused by: java.lang.ClassNotFoundException: io.grpc.BindableService</span><br><span class="line">at java.net.<span class="module-access"><span class="module"><span class="identifier">URLClassLoader</span>.</span></span>find<span class="constructor">Class(URLClassLoader.<span class="params">java</span>:381)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>load<span class="constructor">Class(ClassLoader.<span class="params">java</span>:424)</span></span><br><span class="line">at sun.misc.<span class="module-access"><span class="module"><span class="identifier">Launcher$AppClassLoader</span>.</span></span>load<span class="constructor">Class(Launcher.<span class="params">java</span>:349)</span></span><br><span class="line">at java.lang.<span class="module-access"><span class="module"><span class="identifier">ClassLoader</span>.</span></span>load<span class="constructor">Class(ClassLoader.<span class="params">java</span>:357)</span></span><br><span class="line"><span class="operator">... </span><span class="number">7</span> more</span><br><span class="line">Error: A JNI error has occurred, please check your installation <span class="keyword">and</span> <span class="keyword">try</span> again</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：</p><p>jdk 版本和 jre 版本不一致。</p><p>解决：</p><p>检查<code>java -version</code>和 <code>javac -version</code> 版本是否一致，一看还真不一样。</p><p><img src="https://i.loli.net/2020/07/28/XdrxgoUaVhJSI9f.png" alt="image-20200728075420917"></p><p>重新安装一致的版本。</p><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://jingwei.link/2018/10/02/grpc-wireshark-analysis.html">抓包gRPC的细节及分析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/161577635">gRPC系列(三) 如何借助HTTP2实现传输</a></p></li><li><p><a href="https://juejin.im/post/6844904007811465229">深入理解Protobuf3协议原理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近一段时间周会上频繁听到 gRPC 这个框架，学习一下相关知识：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RPC 相关背景知识&lt;/li&gt;
&lt;li&gt;gRPC 框架使用&lt;/li&gt;
&lt;li&gt;Protocol Buffers 协议相关&lt;/li&gt;
&lt;li&gt;分析一次完整的 gRPC 服务调用请求&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、背景知识&quot;&gt;&lt;a href=&quot;#一、背景知识&quot; class=&quot;headerlink&quot; title=&quot;一、背景知识&quot;&gt;&lt;/a&gt;一、背景知识&lt;/h2&gt;&lt;h3 id=&quot;1-1-RPC-是啥&quot;&gt;&lt;a href=&quot;#1-1-RPC-是啥&quot; class=&quot;headerlink&quot; title=&quot;1.1 RPC 是啥&quot;&gt;&lt;/a&gt;1.1 RPC 是啥&lt;/h3&gt;&lt;p&gt;RPC (Remote Procedure Calls) 远程过程调用。&lt;/p&gt;
&lt;p&gt;本地调用远程方法，比较直接的做法是服务端暴露出 Restful 接口，客户端发 http request 去调用，RPC 的过程简单来看可以理解成是对这个操作进行的一层封装。&lt;/p&gt;
&lt;p&gt;RPC 调用过程如下图所示，RPC 对服务调用方屏蔽掉网络请求、消息编码、数据传输等工作，提供一个代理对象给调用方，使服务调用方调用远程方法时如同调用本地方法一样简洁。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="gRPC" scheme="https://misscoconut.github.io/tags/gRPC/"/>
    
      <category term="Protobuf" scheme="https://misscoconut.github.io/tags/Protobuf/"/>
    
  </entry>
  
  <entry>
    <title>压力管理</title>
    <link href="https://misscoconut.github.io/2020/07/14/%E5%8E%8B%E5%8A%9B/"/>
    <id>https://misscoconut.github.io/2020/07/14/%E5%8E%8B%E5%8A%9B/</id>
    <published>2020-07-13T17:51:33.000Z</published>
    <updated>2020-07-26T17:56:04.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h1><p>近两个月，巨大的压力和内心的焦虑给自己的工作生活与身心健康上带来了许多困扰。</p><p>面对的压力源既有工作上的，更多的则是来自家庭方面，而且这两方面的压力源，在可预见的未来很长一段时间里并不会消失。</p><p>当下我试图为自己找到一套科学的思维框架去直面压力与焦虑，希望今后面对相同情境时可以省去大量无用的思考，将精力聚焦在更有意义的事情上。</p><a id="more"></a><h1 id="二、为什么会存在焦虑？"><a href="#二、为什么会存在焦虑？" class="headerlink" title="二、为什么会存在焦虑？"></a>二、为什么会存在焦虑？</h1><p>如果从进化论角度来理解焦虑的话，那么可以说焦虑是人类生存的必备技能。</p><p>远古时期人类依靠打猎生存，祖先们遇到危险时产生紧张焦虑情绪，导致肾上腺素上升，进而心跳加速，注意力集中，反应敏锐，于是才能在恶劣的自然条件中存活下来。反之，那些不会没有产生紧张焦虑情绪的人类早已被淘汰，如今的我们都是在遇到危险情况时会感到紧张焦虑的祖先们的后代。</p><p>焦虑并不是一种毫无可取之处的情绪，适当的压力和焦虑，可以有效的警醒我们面对即将发生的事情。</p><h1 id="三、焦虑的本质是什么？"><a href="#三、焦虑的本质是什么？" class="headerlink" title="三、焦虑的本质是什么？"></a>三、焦虑的本质是什么？</h1><ul><li><p>存在不确定性</p></li><li><p>无法控制事物发展</p></li><li><p>关心在意某件事</p></li></ul><h1 id="四、如何与焦虑共处"><a href="#四、如何与焦虑共处" class="headerlink" title="四、如何与焦虑共处?"></a>四、如何与焦虑共处?</h1><p>既然焦虑是一种非常正常的应激反应，那么试图去消除焦虑似乎并不容易。</p><p>但我们可以从焦虑的本质入手，想办法和焦虑共处，保证我们的工作生活可以正常进行下去。</p><ol><li><p>存在不确定性 –&gt; <strong>评估威胁程度</strong></p><p> 即便不确定的事情，也会存在确定的一面。</p><p> 做好最好的打算和最坏的打算，无论事情朝着哪个方向发展，自己心里有谱，焦虑感会减轻许多。</p></li><li><p>关心在意某件事 –&gt; <strong>正念冥想</strong></p><p> 在陷入极度焦虑的沼泽时使用，将注意力从嘈杂的事物中拯救出来，专注于当下的呼吸上，和身体建立连接，使自己平静下来。</p><p> 生活中的10%取决于发生的事情，而剩下 90%取决于我们对待事物的反应。正念冥想更积极的意义在于当人平静下来后，才能更理智的思考该以怎样的反应去应对当前的事情。</p><p> 相关资源：潮汐 app、喜马拉雅 app 上的课程等等。</p></li><li><p>无法控制事物发展 –&gt; <strong>做正确的事</strong></p><p> 无法控制的事情，不必执着。做自己能控制的正确的事。</p><blockquote><p>When I do good,I feel good,When I do bad,I feed bad.</p></blockquote><p> 按时吃饭，按时睡觉，正常工作，积极锻炼。</p><p> 越是焦虑紧张的时候，越要做按部就班的正确的事情。熟悉的日常节奏会给自己很多安心的感觉。</p></li></ol><p>不管怎样，生活还要继续下去，可能是中国人骨子里的乐观精神吧，我始终愿意相信一切总会好起来的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、起因&quot;&gt;&lt;a href=&quot;#一、起因&quot; class=&quot;headerlink&quot; title=&quot;一、起因&quot;&gt;&lt;/a&gt;一、起因&lt;/h1&gt;&lt;p&gt;近两个月，巨大的压力和内心的焦虑给自己的工作生活与身心健康上带来了许多困扰。&lt;/p&gt;
&lt;p&gt;面对的压力源既有工作上的，更多的则是来自家庭方面，而且这两方面的压力源，在可预见的未来很长一段时间里并不会消失。&lt;/p&gt;
&lt;p&gt;当下我试图为自己找到一套科学的思维框架去直面压力与焦虑，希望今后面对相同情境时可以省去大量无用的思考，将精力聚焦在更有意义的事情上。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="个人成长" scheme="https://misscoconut.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>把事情做完，然后亮出去</title>
    <link href="https://misscoconut.github.io/2020/07/12/post/"/>
    <id>https://misscoconut.github.io/2020/07/12/post/</id>
    <published>2020-07-12T07:55:05.000Z</published>
    <updated>2020-07-26T17:56:54.408Z</updated>
    
    <content type="html"><![CDATA[<p>博客这个事情，从学生时期就想弄，一拖再拖直到现在，已经步入职场三年了。</p><p>把做的事情亮出去，对我来说是一件蛮有压力的事情。逃避了这么久，并不想再继续安逸下去了。趁现在还算年轻，是时候借着这种压力 push 自己一把。</p><p>这个周末博客准备完毕，给自己定个规矩吧，今后无论工作还是生活，在做的事情无论进展多糟糕，都要把它<strong>做完</strong>，并且要<strong>亮出去</strong>，要去不断逼迫自己下次做的更好，强制审视自己并做出改变。</p><p>希望自己可以做到专业技术类文章<strong>月更至少一篇</strong>，其他领域知识技能类文章<strong>双月一篇</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客这个事情，从学生时期就想弄，一拖再拖直到现在，已经步入职场三年了。&lt;/p&gt;
&lt;p&gt;把做的事情亮出去，对我来说是一件蛮有压力的事情。逃避了这么久，并不想再继续安逸下去了。趁现在还算年轻，是时候借着这种压力 push 自己一把。&lt;/p&gt;
&lt;p&gt;这个周末博客准备完毕，给自己定
      
    
    </summary>
    
    
    
      <category term="生活记录" scheme="https://misscoconut.github.io/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
      <category term="个人成长" scheme="https://misscoconut.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
</feed>
